----------------------------------------------------------- MOTOR DE TTI -----------------------------------------------------------

--- Comando que apunta a la base de datos apropiada ---
USE ${var:base_datos}; 
SET DECIMAL_V2=FALSE;

----Extraci칩n de contratos a los que se debe calcular TTI + Aplicaci칩n de TTI Especial
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_SPE;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_SPE;
CREATE TABLE MIS_TMP_${var:tabla}_SPE AS 
SELECT DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, DWH.COD_ENTITY, DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, 
    DWH.COD_ACT_TYPE, DWH.EOPBAL_CAP, DWH.EOPBAL_INT, DWH.AVGBAL_CAP, DWH.AVGBAL_INT, DWH.PL, DWH.COD_INFO_SOURCE, DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT,
    DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE,
    CAST(CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 0
    ELSE TTI.RATE_TTI END AS DECIMAL(30, 10)) AS FTP, DWH.FTP_RESULT, 
    CASE WHEN (DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0) OR TTI.IDF_CTO IS NOT NULL THEN 'N' ELSE NULL END AS IND_POOL, DWH.DATA_DATE, 
    DT.DATE_ORIGIN, 
    CASE WHEN DT.COD_RATE_TYPE = 'A' AND DT.EXP_DATE IS NULL THEN FROM_TIMESTAMP(DATE_ADD(TO_TIMESTAMP(DATE_ORIGIN,'yyyyMMdd'),ISNULL(ENG.IND_ADM,ENG2.IND_ADM)),'yyyyMMdd') 
         ELSE DT.EXP_DATE END AS EXP_DATE, 
    CASE WHEN DT.COD_RATE_TYPE = 'A' AND DT.DATE_LAST_REV IS NULL THEN FROM_TIMESTAMP(DATE_ADD(TO_TIMESTAMP(DATE_ORIGIN,'yyyyMMdd'),ISNULL(ENG.IND_ADM,ENG2.IND_ADM)),'yyyyMMdd') 
         ELSE DT.DATE_LAST_REV END AS DATE_LAST_REV, 
    CASE WHEN DT.COD_RATE_TYPE = 'A' AND DT.DATE_PRX_REV IS NULL THEN FROM_TIMESTAMP(DATE_ADD(TO_TIMESTAMP(DATE_ORIGIN,'yyyyMMdd'),ISNULL(ENG.IND_ADM,ENG2.IND_ADM)),'yyyyMMdd') 
         ELSE DT.DATE_PRX_REV END AS DATE_PRX_REV, 
    DT.COD_RATE_TYPE, DT.RATE_INT, 
    CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' WHEN TTI.IDF_CTO IS NOT NULL THEN 'SP' ELSE NULL END AS COD_METHOD, CLI.COD_SEGMENT, DT.COD_AMRT_MET
FROM 
    (SELECT TMP.*
    FROM MIS_DWH_${var:tabla} TMP 
    LEFT JOIN (
        SELECT IDF_CTO, COUNT(*) CONTEO 
        FROM MIS_DWH_${var:tabla} DWH 
        WHERE DWH.DATA_DATE = '${var:periodo}' AND DWH.COD_VALUE NOT IN ('RSL') AND DWH.FTP1 IS NULL 
        GROUP BY IDF_CTO) CONT 
    ON TMP.IDF_CTO = CONT.IDF_CTO 
    WHERE TMP.DATA_DATE = '${var:periodo}' AND TMP.COD_VALUE NOT IN ('RSL') AND TMP.FTP1 IS NULL
    AND ISNOTTRUE(CONTEO <> 1 AND STRRIGHT(COD_INFO_SOURCE,2) = '_M') 
) DWH 
LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT WHERE DATA_DATE = '${var:periodo}') DT 
ON DWH.DATA_DATE=DT.DATA_DATE AND DWH.IDF_CTO=DT.IDF_CTO AND DWH.COD_ENTITY=DT.COD_ENTITY 
LEFT JOIN MIS_APR_CLIENT_DT CLI 
ON CLI.DATA_DATE = DT.DATA_DATE AND CLI.IDF_CLI = DT.IDF_CLI 
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_SPE TTI WHERE TTI.RATE_TTI IS NOT NULL AND TTI.DATA_DATE = '${var:periodo}') TTI 
ON REGEXP_REPLACE(DWH.IDF_CTO, '^0*', '') = REGEXP_REPLACE(TTI.IDF_CTO, '^0*', '') AND DWH.COD_VALUE IN ('CAP','INT')
AND DWH.COD_VALUE = TTI.COD_VALUE
LEFT JOIN MIS_PAR_TTI_ENG ENG
ON DWH.COD_BLCE_PROD = ENG.COD_BLCE_PROD AND DWH.COD_BLCE_STATUS = ENG.COD_BLCE_STATUS AND DWH.COD_CURRENCY = ENG.COD_CURRENCY 
    AND IF(TRIM(ENG.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(ENG.COD_BUSINESS_LINE)
    AND IF(TRIM(ENG.COD_SEGMENT)='', '', CLI.COD_SEGMENT) = TRIM(ENG.COD_SEGMENT)
    AND (IF(TRIM(DT.COD_AMRT_MET) IS NULL OR TRIM(DT.COD_AMRT_MET) = '', 'NA', TRIM(DT.COD_AMRT_MET))=
    IF(TRIM(ENG.COD_AMRT_MET) IS NULL OR TRIM(ENG.COD_AMRT_MET) = '', 'NA', TRIM(ENG.COD_AMRT_MET)))
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '') ENG2
ON DWH.COD_BLCE_PROD = ENG2.COD_BLCE_PROD AND DWH.COD_BLCE_STATUS = ENG2.COD_BLCE_STATUS AND DWH.COD_CURRENCY = ENG2.COD_CURRENCY 
    AND IF(TRIM(ENG2.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(ENG2.COD_BUSINESS_LINE)
    AND IF(TRIM(ENG2.COD_SEGMENT)='', '', CLI.COD_SEGMENT) = TRIM(ENG2.COD_SEGMENT)
;

INSERT INTO MIS_TMP_${var:tabla}_SPE
SELECT DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, DWH.COD_ENTITY, DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, 
    DWH.COD_ACT_TYPE, CAST(DWH.EOPBAL_CAP AS decimal(30, 10)), CAST(DWH.EOPBAL_INT AS decimal(30, 10)), CAST(DWH.AVGBAL_CAP AS decimal(30, 10)), CAST(DWH.AVGBAL_INT AS decimal(30, 10)), CAST(DWH.PL AS decimal(30, 10)), DWH.COD_INFO_SOURCE, DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, 
    DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    CAST(TTI.RATE_TTI AS decimal(30, 10)) AS FTP, DWH.FTP_RESULT, IF(TTI.IDF_CTO IS NOT NULL, 'N', NULL) AS IND_POOL, DWH.DATA_DATE, 
    DT.DATE_ORIGIN, 
    CASE WHEN DT.COD_RATE_TYPE = 'A' AND DT.EXP_DATE IS NULL THEN FROM_TIMESTAMP(DATE_ADD(TO_TIMESTAMP(DATE_ORIGIN,'yyyyMMdd'),ISNULL(ENG.IND_ADM,ENG2.IND_ADM)),'yyyyMMdd') 
         ELSE DT.EXP_DATE END AS EXP_DATE, 
    CASE WHEN DT.COD_RATE_TYPE = 'A' AND DT.DATE_LAST_REV IS NULL THEN FROM_TIMESTAMP(DATE_ADD(TO_TIMESTAMP(DATE_ORIGIN,'yyyyMMdd'),ISNULL(ENG.IND_ADM,ENG2.IND_ADM)),'yyyyMMdd') 
         ELSE DT.DATE_LAST_REV END AS DATE_LAST_REV, 
    CASE WHEN DT.COD_RATE_TYPE = 'A' AND DT.DATE_PRX_REV IS NULL THEN FROM_TIMESTAMP(DATE_ADD(TO_TIMESTAMP(DT.DATE_ORIGIN,'yyyyMMdd'),ISNULL(ENG.IND_ADM,ENG2.IND_ADM)),'yyyyMMdd') 
         ELSE DT.DATE_PRX_REV END AS DATE_PRX_REV, 
    DT.COD_RATE_TYPE, DT.RATE_INT, 
    IF(TTI.IDF_CTO IS NOT NULL, 'SP', NULL) AS COD_METHOD, CLI.COD_SEGMENT,DT.COD_AMRT_MET
FROM 
    (SELECT CONTEO, STRRIGHT(COD_INFO_SOURCE,2), TMP.COD_CONT, TMP.IDF_CTO, TMP.COD_GL, TMP.DES_GL, TMP.COD_ACCO_CENT, TMP.COD_OFFI, ANT.COD_BLCE_STATUS, TMP.COD_VALUE, TMP.COD_CURRENCY,
    TMP.COD_ENTITY, ANT.COD_PRODUCT, ANT.COD_SUBPRODUCT, TMP.COD_ACT_TYPE, SUM(TMP.EOPBAL_CAP) AS EOPBAL_CAP, SUM(TMP.EOPBAL_INT) AS EOPBAL_INT, SUM(TMP.AVGBAL_CAP) AS AVGBAL_CAP, SUM(TMP.AVGBAL_INT) AS AVGBAL_INT,
    SUM(TMP.PL) AS PL, ANT.COD_GL_GROUP, ANT.DES_GL_GROUP, TMP.ACCOUNT_CONCEPT, TMP.COD_PL_ACC, TMP.DES_PL_ACC, ANT.COD_BLCE_PROD, ANT.DES_BLCE_PROD,
    TMP.COD_BUSINESS_LINE, TMP.DES_BUSINESS_LINE, TMP.COD_METHOD1, TMP.FTP1, TMP.COD_METHOD2, TMP.FTP2, TMP.FTP_RESULT, TMP.IND_POOL, TMP.DATA_DATE, TMP.COD_INFO_SOURCE
    FROM MIS_DWH_${var:tabla} TMP 
    LEFT JOIN (
        SELECT IDF_CTO, CON AS CONTEO
        FROM (SELECT IDF_CTO, COUNT(*) AS CON
        FROM MIS_DWH_${var:tabla} LIA
        WHERE LIA.DATA_DATE = '${var:periodo}' AND LIA.COD_VALUE IN ('CAP','INT') AND LIA.FTP1 IS NULL AND LIA.COD_PRODUCT!='CUVENORE' AND STRRIGHT(LIA.cod_info_source,2) = '_M'
        GROUP BY IDF_CTO) A
        ) CONT
    ON TMP.IDF_CTO = CONT.IDF_CTO
    LEFT JOIN (SELECT IDF_CTO, COD_VALUE, COD_BLCE_STATUS, COD_PRODUCT, COD_SUBPRODUCT, COD_GL_GROUP, DES_GL_GROUP, COD_BLCE_PROD, DES_BLCE_PROD, 
    MAX(DATA_DATE) AS DATA_DATE FROM MIS_DWH_${var:tabla}
    WHERE STRLEFT(DATA_DATE,6) = STRLEFT('${var:periodo}',6) AND DATA_DATE < '${var:periodo}' AND COD_INFO_SOURCE NOT LIKE '%_M' AND COD_VALUE IN ('CAP','INT')
    GROUP BY IDF_CTO, COD_VALUE, COD_BLCE_STATUS, COD_PRODUCT, COD_SUBPRODUCT, COD_GL_GROUP, DES_GL_GROUP, COD_BLCE_PROD, DES_BLCE_PROD) ANT
    ON TMP.IDF_CTO = ANT.IDF_CTO AND TMP.COD_VALUE = ANT.COD_VALUE
    WHERE TMP.DATA_DATE = '${var:periodo}' AND TMP.COD_VALUE IN ('CAP','INT') AND TMP.FTP1 IS NULL AND TMP.COD_PRODUCT!='CUVENORE'
    AND CONTEO <> 1 AND STRRIGHT(COD_INFO_SOURCE,2) = '_M'
    GROUP BY CONTEO, STRRIGHT(COD_INFO_SOURCE,2), TMP.COD_CONT, TMP.IDF_CTO, TMP.COD_GL, TMP.DES_GL, TMP.COD_ACCO_CENT, TMP.COD_OFFI, TMP.COD_VALUE, TMP.COD_CURRENCY, TMP.COD_ENTITY, 
    TMP.COD_ACT_TYPE, TMP.ACCOUNT_CONCEPT, TMP.COD_PL_ACC, TMP.DES_PL_ACC, TMP.COD_BUSINESS_LINE, TMP.DES_BUSINESS_LINE, TMP.COD_METHOD1, TMP.FTP1, 
    TMP.COD_METHOD2, TMP.FTP2, TMP.FTP_RESULT, TMP.IND_POOL, TMP.DATA_DATE, TMP.COD_INFO_SOURCE, ANT.COD_BLCE_STATUS, ANT.COD_GL_GROUP, ANT.DES_GL_GROUP, 
    ANT.COD_PRODUCT, ANT.COD_SUBPRODUCT, ANT.COD_BLCE_PROD, ANT.DES_BLCE_PROD
) DWH 
LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT WHERE DATA_DATE = '${var:periodo}') DT
ON DWH.DATA_DATE=DT.DATA_DATE AND DWH.IDF_CTO=DT.IDF_CTO AND DWH.COD_ENTITY=DT.COD_ENTITY 
LEFT JOIN MIS_APR_CLIENT_DT CLI
ON CLI.DATA_DATE = DT.DATA_DATE AND CLI.IDF_CLI = DT.IDF_CLI 
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_SPE TTI WHERE TTI.RATE_TTI IS NOT NULL AND TTI.DATA_DATE = '${var:periodo}') TTI  
ON REGEXP_REPLACE(DWH.IDF_CTO, '^0*', '') = REGEXP_REPLACE(TTI.IDF_CTO, '^0*', '') AND DWH.COD_VALUE IN ('CAP','INT')
AND DWH.COD_VALUE = TTI.COD_VALUE
LEFT JOIN MIS_PAR_TTI_ENG ENG
ON DWH.COD_BLCE_PROD = ENG.COD_BLCE_PROD AND DWH.COD_BLCE_STATUS = ENG.COD_BLCE_STATUS AND DWH.COD_CURRENCY = ENG.COD_CURRENCY 
    AND IF(TRIM(ENG.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(ENG.COD_BUSINESS_LINE)
    AND IF(TRIM(ENG.COD_SEGMENT)='', '', CLI.COD_SEGMENT) = TRIM(ENG.COD_SEGMENT)
    AND (IF(TRIM(DT.COD_AMRT_MET) IS NULL OR TRIM(DT.COD_AMRT_MET) = '', 'NA', TRIM(DT.COD_AMRT_MET))=
    IF(TRIM(ENG.COD_AMRT_MET) IS NULL OR TRIM(ENG.COD_AMRT_MET) = '', 'NA', TRIM(ENG.COD_AMRT_MET)))
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '') ENG2
ON DWH.COD_BLCE_PROD = ENG2.COD_BLCE_PROD AND DWH.COD_BLCE_STATUS = ENG2.COD_BLCE_STATUS AND DWH.COD_CURRENCY = ENG2.COD_CURRENCY 
    AND IF(TRIM(ENG2.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(ENG2.COD_BUSINESS_LINE)
    AND IF(TRIM(ENG2.COD_SEGMENT)='', '', CLI.COD_SEGMENT) = TRIM(ENG2.COD_SEGMENT)
WHERE DWH.IDF_CTO NOT IN (SELECT DISTINCT IDF_CTO FROM MIS_TMP_${var:tabla}_SPE);

----Validaci칩n de contratos con par치metros suficientes y marcado de rechazos 
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_VAL;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_VAL;
CREATE TABLE MIS_TMP_${var:tabla}_VAL AS 
SELECT a.*,
    ISNULL(b.METHOD_TTI,c.METHOD_TTI) AS METHOD_TTI, ISNULL(b.COD_CURVE,c.COD_CURVE) AS COD_CURVE, ISNULL(b.COD_CURRENCY,c.COD_CURRENCY) AS COD_CURRENCY_TTI, 
    ISNULL(b.TERM,c.TERM) AS TERM, ISNULL(b.TERM_FACTOR,c.TERM_FACTOR) AS TERM_FACTOR, ISNULL(b.AVG_PERIOD,c.AVG_PERIOD) AS AVG_PERIOD, 
    ISNULL(b.IND_VOLATILITY,c.IND_VOLATILITY) AS IND_VOLATILITY, ISNULL(b.PERC_VOLATILITY,c.PERC_VOLATILITY) AS PERC_VOLATILITY, ISNULL(b.COD_BCA_INT,c.COD_BCA_INT) AS COD_BCA_INT, 
    ISNULL(b.IND_SPREAD,c.IND_SPREAD) AS IND_SPREAD, ISNULL(b.COD_BUSINESS_LINE,c.COD_BUSINESS_LINE) AS COD_BUSINESS_LINE_TTI,
    CASE WHEN a.FTP IS NOT NULL THEN 'N' --No se rechazan contratos con TTI especial
        WHEN ISNULL(b.COD_BLCE_PROD,c.COD_BLCE_PROD) IS NULL 
        AND (a.DATE_ORIGIN <> '${var:periodo}' OR (a.COD_RATE_TYPE = 'V' AND a.DATE_LAST_REV <> '${var:periodo}')) THEN 'N'
        WHEN ISNULL(b.COD_BLCE_PROD,c.COD_BLCE_PROD) IS NULL THEN 'E' --Se excluye al no estar parametrizado ni se debe rechazar ni se le debe calcular TTI
        WHEN ISNULL(b.METHOD_TTI,c.METHOD_TTI) IS NULL THEN 'Y' 
        WHEN ISNULL(b.COD_CURVE,c.COD_CURVE) IS NULL THEN 'Y'
        WHEN ISNULL(b.COD_CURRENCY,c.COD_CURRENCY) IS NULL THEN 'Y' 
        WHEN ISNULL(b.COD_BCA_INT,c.COD_BCA_INT) IS NULL THEN 'Y'
        WHEN ISNULL(b.METHOD_TTI,c.METHOD_TTI) = 'MA' AND (ISNULL(b.TERM,c.TERM) IS NULL OR ISNULL(b.TERM,c.TERM) <= 0) THEN 'Y' 
        WHEN ISNULL(b.METHOD_TTI,c.METHOD_TTI) = 'MA' AND (ISNULL(b.AVG_PERIOD,c.AVG_PERIOD) IS NULL OR ISNULL(b.AVG_PERIOD,c.AVG_PERIOD) <= 
        0) THEN 'Y' 
        WHEN ISNULL(b.METHOD_TTI,c.METHOD_TTI) = 'EX' AND (ISNULL(b.TERM_FACTOR,c.TERM_FACTOR) IS NULL OR 
        ISNULL(b.TERM_FACTOR,c.TERM_FACTOR) <= 0 OR ISNULL(b.TERM_FACTOR,c.TERM_FACTOR) >= 1) THEN 
        'Y' 
        WHEN ISNULL(b.METHOD_TTI,c.METHOD_TTI) IN ('ST','EX') AND (a.DATE_ORIGIN IS NULL OR a.EXP_DATE IS NULL) THEN 'Y' 
        WHEN ISNULL(b.METHOD_TTI,c.METHOD_TTI) IN ('ST','EX') AND a.COD_RATE_TYPE = 'V' AND (a.DATE_LAST_REV IS NULL OR (a.EXP_DATE IS NULL 
        AND a.DATE_PRX_REV IS NULL)) THEN 'Y' 
        WHEN ISNULL(b.IND_SPREAD,c.IND_SPREAD) = 'Y' AND a.RATE_INT IS NULL THEN 'Y' 
        WHEN ISNULL(b.IND_VOLATILITY,c.IND_VOLATILITY) = 'Y' AND (ISNULL(b.PERC_VOLATILITY,c.PERC_VOLATILITY) IS NULL OR 
        ISNULL(b.PERC_VOLATILITY,c.PERC_VOLATILITY) <= 0 OR ISNULL(b.PERC_VOLATILITY,c.PERC_VOLATILITY) >= 1) THEN 'Y'
        ELSE 'N'  
    END AS REJECTION
FROM MIS_TMP_${var:tabla}_SPE a 
LEFT JOIN MIS_PAR_TTI_ENG b
ON a.COD_BLCE_PROD = b.COD_BLCE_PROD AND a.COD_BLCE_STATUS = b.COD_BLCE_STATUS AND a.COD_CURRENCY = b.COD_CURRENCY 
    AND IF(TRIM(b.COD_BUSINESS_LINE)='', '', a.COD_BUSINESS_LINE) = TRIM(b.COD_BUSINESS_LINE)
    AND IF(TRIM(b.COD_SEGMENT)='', '', a.COD_SEGMENT) = TRIM(b.COD_SEGMENT)
    AND (IF(TRIM(a.COD_AMRT_MET) IS NULL OR TRIM(a.COD_AMRT_MET) = '', 'NA', TRIM(a.COD_AMRT_MET))=
    IF(TRIM(b.COD_AMRT_MET) IS NULL OR TRIM(b.COD_AMRT_MET) = '', 'NA', TRIM(b.COD_AMRT_MET)))
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '') c
ON a.COD_BLCE_PROD = c.COD_BLCE_PROD AND a.COD_BLCE_STATUS = c.COD_BLCE_STATUS AND a.COD_CURRENCY = c.COD_CURRENCY 
    AND IF(TRIM(c.COD_BUSINESS_LINE)='', '', a.COD_BUSINESS_LINE) = TRIM(c.COD_BUSINESS_LINE)
    AND IF(TRIM(c.COD_SEGMENT)='', '', a.COD_SEGMENT) = TRIM(c.COD_SEGMENT);


----Inserci칩n de registros rechazados y que no tendr치n c치lculo de TTI
INSERT OVERWRITE MIS_REJECTIONS_TTI PARTITION (COD_CONT)   
SELECT a.DATA_DATE, a.IDF_CTO, a.COD_BLCE_PROD, a.COD_BUSINESS_LINE, a.METHOD_TTI, a.COD_CURVE, a.COD_CURRENCY_TTI, a.COD_BCA_INT, 
    IF(a.METHOD_TTI = 'MA', a.TERM, -1) AS TERM,
    IF(a.METHOD_TTI = 'EX', a.TERM_FACTOR, -1) AS TERM_FACTOR,
    IF(a.METHOD_TTI = 'MA', a.AVG_PERIOD, -1) AS AVG_PERIOD,
    IF(a.IND_VOLATILITY = 'Y', a.PERC_VOLATILITY, -1) AS PERC_VOLATILITY,
    IF(a.METHOD_TTI IN ('ST','EX'), a.COD_RATE_TYPE, 'N/A') AS COD_RATE_TYPE,
    IF(a.METHOD_TTI IN ('ST','EX'), a.DATE_ORIGIN, 'N/A') AS DATE_ORIGIN,
    IF(a.METHOD_TTI IN ('ST','EX'), a.EXP_DATE, 'N/A') AS EXP_DATE,
    IF(a.METHOD_TTI IN ('ST','EX') AND a.COD_RATE_TYPE = 'V', a.DATE_LAST_REV, 'N/A') AS DATE_LAST_REV,
    IF(a.METHOD_TTI IN ('ST','EX') AND a.COD_RATE_TYPE = 'V', a.DATE_PRX_REV, 'N/A') AS DATE_PRX_REV,
    IF(a.IND_SPREAD = 'Y', a.RATE_INT, -1) AS RATE_INT, 
    a.EOPBAL_CAP AS EOPBAL, 
    a.COD_CONT 
FROM MIS_TMP_${var:tabla}_VAL a 
WHERE a.REJECTION = 'Y';


----Consolidado de registros a los que se les calcular치 TTI por m칠todos
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_INI;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_INI;
CREATE TABLE MIS_TMP_${var:tabla}_INI AS 
SELECT DISTINCT a.COD_CONT, a.IDF_CTO, a.COD_GL, a.DES_GL, a.COD_ACCO_CENT, a.COD_OFFI, a.COD_BLCE_STATUS, a.COD_VALUE, a.COD_CURRENCY, a.COD_ENTITY, a.COD_PRODUCT, a.COD_SUBPRODUCT, 
    a.COD_ACT_TYPE, a.EOPBAL_CAP, a.EOPBAL_INT, a.AVGBAL_CAP, a.AVGBAL_INT, a.PL, 'ENG TTI' AS COD_INFO_SOURCE, a.COD_GL_GROUP, a.DES_GL_GROUP, a.ACCOUNT_CONCEPT, 
    a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, a.COD_BUSINESS_LINE, a.DES_BUSINESS_LINE, 
    a.FTP, a.FTP_RESULT, a.IND_POOL, a.DATA_DATE, 
    a.DATE_ORIGIN, a.EXP_DATE, a.DATE_LAST_REV, a.DATE_PRX_REV, a.COD_RATE_TYPE, a.RATE_INT, 
    IF(a.COD_METHOD IS NOT NULL, a.COD_METHOD, a.METHOD_TTI) AS COD_METHOD, a.IND_VOLATILITY, a.COD_BCA_INT, a.COD_SEGMENT, 
    a.COD_AMRT_MET
FROM MIS_TMP_${var:tabla}_VAL a 
WHERE a.REJECTION NOT IN ('Y','E');

----Eliminaci칩n de tablas temporales 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_SPE;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_SPE;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_VAL;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_VAL;


----Definici칩n de la tasa a considerar en caso de que el punto requerido sea mayor a los puntos parametrizados
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_MAX_CURVE;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_MAX_CURVE;
CREATE TABLE MIS_TMP_${var:tabla}_MAX_CURVE AS
SELECT TMP.DATA_DATE, TMP.COD_CURVE, TMP.COD_CURRENCY, TMP.TERM, CUR.RATE
FROM (
    SELECT TMP.DATA_DATE, TMP.COD_CURVE, TMP.COD_CURRENCY, MAX(TMP.TERM) AS TERM
    FROM MIS_PAR_CURVES TMP
    GROUP BY TMP.DATA_DATE, TMP.COD_CURVE, TMP.COD_CURRENCY
) TMP
LEFT JOIN MIS_PAR_CURVES CUR
ON TMP.DATA_DATE = CUR.DATA_DATE AND TMP.COD_CURVE = CUR.COD_CURVE AND TMP.COD_CURRENCY = CUR.COD_CURRENCY AND TMP.TERM = CUR.TERM;


----C치lculo de TTI para productos con m칠todo Plazo Vencimiento (ST) y Vida media (EX)
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM;
CREATE TABLE MIS_TMP_${var:tabla}_STERM AS 
SELECT ISNULL(PARAM_ST.METHOD_TTI,PARAM_ST2.METHOD_TTI) AS METHOD_TTI, ISNULL(PARAM_ST.COD_CURVE,PARAM_ST2.COD_CURVE) AS COD_CURVE, 
    ISNULL(PARAM_ST.TERM_FACTOR,PARAM_ST2.TERM_FACTOR) AS TERM_FACTOR, ISNULL(PARAM_ST.IND_SPREAD,PARAM_ST2.IND_SPREAD) AS IND_SPREAD, 
    ISNULL(PARAM_ST.IND_VOLATILITY,PARAM_ST2.IND_VOLATILITY) AS IND_VOL, ISNULL(PARAM_ST.PERC_VOLATILITY,PARAM_ST2.PERC_VOLATILITY) AS 
    PERC_VOLATILITY, 
    SALIDA_DWH.*,  
    CASE
        WHEN ISNULL(PARAM_ST.METHOD_TTI,PARAM_ST2.METHOD_TTI) = 'EX'
        THEN ROUND(DATEDIFF(TO_TIMESTAMP(SALIDA_DWH.FINISH_DATE,'yyyyMMdd'), TO_TIMESTAMP(SALIDA_DWH.START_DATE,'yyyyMMdd')) * 
        ISNULL(PARAM_ST.TERM_FACTOR,PARAM_ST2.TERM_FACTOR),0)
        WHEN ISNULL(PARAM_ST.METHOD_TTI,PARAM_ST2.METHOD_TTI) = 'ST'
        THEN DATEDIFF(TO_TIMESTAMP(SALIDA_DWH.FINISH_DATE,'yyyyMMdd'), TO_TIMESTAMP(SALIDA_DWH.START_DATE,'yyyyMMdd'))
        ELSE NULL
    END AS NUMDIAS
FROM
    (SELECT DWH.*, 
    CASE WHEN DWH.COD_RATE_TYPE = 'A' AND DWH.DATE_ORIGIN = DWH.DATA_DATE THEN DWH.DATE_ORIGIN
        WHEN DWH.COD_RATE_TYPE = 'A' THEN DWH.DATE_LAST_REV 
        WHEN DWH.COD_RATE_TYPE = 'F' THEN DWH.DATE_ORIGIN 
        WHEN DWH.COD_RATE_TYPE = 'V' AND DWH.DATE_ORIGIN = DWH.DATA_DATE THEN DWH.DATE_ORIGIN 
        WHEN DWH.COD_RATE_TYPE = 'V' AND DWH.DATE_LAST_REV = DWH.DATA_DATE THEN DWH.DATE_LAST_REV 
        WHEN DT_PREV.COD_RATE_TYPE = 'F' AND DWH.COD_RATE_TYPE = 'V' THEN DWH.DATE_LAST_REV
        ELSE DWH.DATE_ORIGIN END AS START_DATE,
    CASE WHEN DT_PREV.COD_RATE_TYPE = 'V' AND DWH.COD_RATE_TYPE = 'F' THEN DWH.DATA_DATE ELSE NULL END AS START_DATE_2,
    CASE WHEN DWH.COD_RATE_TYPE = 'A' THEN DWH.EXP_DATE 
        WHEN DWH.COD_RATE_TYPE = 'F' THEN DWH.EXP_DATE 
        WHEN DWH.COD_RATE_TYPE = 'V' AND IFNULL(DWH.DATE_PRX_REV, '') != '' THEN DWH.DATE_PRX_REV 
        WHEN DWH.COD_RATE_TYPE = 'V' AND IFNULL(DWH.DATE_PRX_REV, '') = '' THEN DWH.EXP_DATE 
        ELSE DWH.EXP_DATE END AS FINISH_DATE 
    FROM MIS_TMP_${var:tabla}_INI DWH
    LEFT JOIN (SELECT DISTINCT DATA_DATE, IDF_CTO, COD_VALUE, COD_ENTITY FROM MIS_DWH_${var:tabla} 
               WHERE TO_TIMESTAMP(DATA_DATE, 'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}','yyyyMMdd'), 1) ) DWHP
    ON TO_TIMESTAMP(DWHP.DATA_DATE, 'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(DWH.DATA_DATE,'yyyyMMdd'), 1) 
    AND DWHP.IDF_CTO=DWH.IDF_CTO AND DWHP.COD_VALUE = DWH.COD_VALUE AND DWHP.COD_ENTITY = DWH.COD_ENTITY
    LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT TMP
             WHERE TO_TIMESTAMP(TMP.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), 1) ) DT_PREV 
    ON TO_TIMESTAMP(DT_PREV.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(DWH.DATA_DATE, 'yyyyMMdd'), 1) AND 
    DT_PREV.IDF_CTO = DWH.IDF_CTO AND DT_PREV.COD_ENTITY = DWH.COD_ENTITY 
    WHERE DWH.FTP IS NULL 
        AND ((DWH.COD_RATE_TYPE = 'A' AND DWH.DATE_ORIGIN = DWH.DATA_DATE)
        OR (DWH.COD_RATE_TYPE = 'A' AND DWH.DATE_LAST_REV = DWH.DATA_DATE)
        OR (DWH.COD_RATE_TYPE = 'F' AND DWH.DATE_ORIGIN = DWH.DATA_DATE)
        OR (DT_PREV.COD_RATE_TYPE = 'V' AND DWH.COD_RATE_TYPE = 'F')
        OR (DWH.COD_RATE_TYPE = 'V' AND DWH.DATE_ORIGIN = DWH.DATA_DATE)
        OR (DWH.COD_RATE_TYPE = 'V' AND DWH.DATE_LAST_REV = DWH.DATA_DATE)
        OR (DWHP.IDF_CTO IS NULL AND ISNULL(DWH.DATE_ORIGIN,'0') < ISNULL(DWH.DATA_DATE,'0'))
        OR (DT_PREV.COD_RATE_TYPE = 'F' AND DWH.COD_RATE_TYPE = 'V')
        )
    ) SALIDA_DWH
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE METHOD_TTI IN ('ST', 'EX')) PARAM_ST 
ON PARAM_ST.COD_BLCE_PROD=SALIDA_DWH.COD_BLCE_PROD AND PARAM_ST.COD_BLCE_STATUS=SALIDA_DWH.COD_BLCE_STATUS AND PARAM_ST.COD_CURRENCY=SALIDA_DWH.COD_CURRENCY AND IF(TRIM(PARAM_ST.COD_BUSINESS_LINE)='', '', SALIDA_DWH.COD_BUSINESS_LINE) = TRIM(PARAM_ST.COD_BUSINESS_LINE) AND IF(TRIM(PARAM_ST.COD_SEGMENT)='', '', SALIDA_DWH.COD_SEGMENT) = TRIM(PARAM_ST.COD_SEGMENT)
    AND (IF(SALIDA_DWH.COD_AMRT_MET IS NULL OR TRIM(SALIDA_DWH.COD_AMRT_MET) = '', 'NA', SALIDA_DWH.COD_AMRT_MET)=
    IF(PARAM_ST.COD_AMRT_MET IS NULL OR TRIM(PARAM_ST.COD_AMRT_MET) = '', 'NA', PARAM_ST.COD_AMRT_MET))
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '' AND METHOD_TTI IN ('ST', 'EX')) PARAM_ST2
ON PARAM_ST2.COD_BLCE_PROD=SALIDA_DWH.COD_BLCE_PROD AND PARAM_ST2.COD_BLCE_STATUS=SALIDA_DWH.COD_BLCE_STATUS AND PARAM_ST2.COD_CURRENCY=SALIDA_DWH.COD_CURRENCY AND IF(TRIM(PARAM_ST2.COD_BUSINESS_LINE)='', '', SALIDA_DWH.COD_BUSINESS_LINE) = TRIM(PARAM_ST2.COD_BUSINESS_LINE) AND IF(TRIM(PARAM_ST2.COD_SEGMENT)='', '', SALIDA_DWH.COD_SEGMENT) = TRIM(PARAM_ST2.COD_SEGMENT)
WHERE (PARAM_ST.COD_BLCE_PROD IS NOT NULL OR PARAM_ST2.COD_BLCE_PROD IS NOT NULL)
;

TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM2;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM2;
CREATE TABLE MIS_TMP_${var:tabla}_STERM2 AS
SELECT ST.DATA_DATE, ST.COD_CONT, ST.IDF_CTO, ST.COD_GL, ST.DES_GL, ST.COD_ACCO_CENT, ST.COD_OFFI, ST.COD_BLCE_STATUS, ST.COD_VALUE, ST.COD_CURRENCY,
    ST.COD_ENTITY, ST.COD_PRODUCT, ST.COD_SUBPRODUCT, ST.COD_ACT_TYPE, ST.EOPBAL_CAP, ST.EOPBAL_INT, ST.AVGBAL_CAP, ST.AVGBAL_INT, ST.PL, ST.COD_INFO_SOURCE, ST.COD_GL_GROUP, ST.DES_GL_GROUP,
    ST.ACCOUNT_CONCEPT, ST.COD_PL_ACC, ST.DES_PL_ACC, ST.COD_BLCE_PROD, ST.DES_BLCE_PROD, ST.COD_BUSINESS_LINE, ST.DES_BUSINESS_LINE, 
    CAST(CASE 
        WHEN ST.IND_SPREAD = 'Y' AND ST.DATE_ORIGIN <> ST.DATA_DATE THEN ST.RATE_INT - (DT_PREV.RATE_INT - DWH_PREV.FTP1) 
        WHEN ST.NUMDIAS > MCUR.TERM THEN MCUR.RATE 
        ELSE CUR.RATE   
    END * IF(ST.IND_VOL = 'Y', ST.PERC_VOLATILITY, 1) AS decimal(30, 10)) AS FTP,
    CAST(NULL AS decimal(30, 10)) AS FTP_RESULT, 'N' AS IND_POOL, ST.DATE_ORIGIN, ST.EXP_DATE, ST.DATE_LAST_REV, ST.METHOD_TTI, ST.COD_SEGMENT,ST.COD_AMRT_MET
FROM MIS_TMP_${var:tabla}_STERM ST
LEFT JOIN MIS_PAR_CURVES CUR
ON ST.COD_CURVE=CUR.COD_CURVE AND ST.COD_CURRENCY=CUR.COD_CURRENCY AND 
    (ISNULL(ST.START_DATE_2,ST.START_DATE) = CUR.DATA_DATE) AND ST.NUMDIAS = CUR.TERM
LEFT JOIN MIS_TMP_${var:tabla}_MAX_CURVE MCUR
ON ST.COD_CURVE=MCUR.COD_CURVE AND ST.COD_CURRENCY=MCUR.COD_CURRENCY AND 
    (ISNULL(ST.START_DATE_2,ST.START_DATE) = MCUR.DATA_DATE) AND ST.NUMDIAS > MCUR.TERM
LEFT JOIN (
    SELECT * 
    FROM MIS_DWH_${var:tabla} TMP
    WHERE TO_TIMESTAMP(TMP.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), 1)
) DWH_PREV
ON TO_TIMESTAMP(DWH_PREV.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(ST.DATA_DATE, 'yyyyMMdd'), 1) AND DWH_PREV.COD_VALUE = ST.COD_VALUE AND 
    DWH_PREV.IDF_CTO = ST.IDF_CTO AND DWH_PREV.COD_ENTITY=ST.COD_ENTITY AND --AND DWH_PREV.COD_PRODUCT = ST.COD_PRODUCT AND DWH_PREV.COD_SUBPRODUCT = ST.COD_SUBPRODUCT 
    DWH_PREV.COD_CURRENCY=ST.COD_CURRENCY AND ST.COD_INFO_SOURCE = DWH_PREV.COD_INFO_SOURCE AND DWH_PREV.IND_POOL = 'N'
LEFT JOIN (
    SELECT * 
    FROM MIS_APR_CONTRACT_DT TMP
    WHERE TO_TIMESTAMP(TMP.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), 1)
) DT_PREV
ON TO_TIMESTAMP(DT_PREV.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(ST.DATA_DATE, 'yyyyMMdd'), 1) AND 
    DT_PREV.IDF_CTO = ST.IDF_CTO AND DT_PREV.COD_ENTITY=ST.COD_ENTITY AND DT_PREV.COD_CURRENCY=ST.COD_CURRENCY;

----Eliminaci칩n de tablas temporales 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM;

----C치lculo de TTI para productos con m칠todo M칠dia M칩vil (MA - Moving Average) 
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_TTI_MA;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_TTI_MA;
CREATE TABLE MIS_TMP_${var:tabla}_TTI_MA AS
SELECT a.COD_BLCE_PROD, a.COD_BUSINESS_LINE, a.COD_SEGMENT, a.COD_AMRT_MET, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.METHOD_TTI, a.COD_CURVE, a.TERM, a.AVG_PERIOD, 
    CAST(AVG(a.RATE) * IF(a.IND_VOLATILITY = 'Y', a.PERC_VOLATILITY, 1) AS decimal(30, 10)) AS TTI, a.IND_VOLATILITY, a.PERC_VOLATILITY 
FROM (
    SELECT a.COD_BLCE_PROD, a.COD_BUSINESS_LINE, a.COD_SEGMENT, a.COD_AMRT_MET, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.METHOD_TTI, a.COD_CURVE, a.TERM, a.AVG_PERIOD, a.IND_VOLATILITY, a.PERC_VOLATILITY, b.RATE
    FROM (SELECT * FROM MIS_PAR_TTI_ENG WHERE METHOD_TTI='MA') a
    LEFT JOIN MIS_PAR_CURVES b
    ON a.COD_CURVE = b.COD_CURVE AND a.TERM = b.TERM AND a.COD_CURRENCY = b.COD_CURRENCY AND
        (TO_TIMESTAMP(b.DATA_DATE, 'yyyyMMdd') BETWEEN SUBDATE(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), a.AVG_PERIOD - 1) AND TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'))
) a
GROUP BY a.COD_BLCE_PROD, a.COD_BUSINESS_LINE, a.COD_SEGMENT,a.COD_AMRT_MET, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.METHOD_TTI, a.COD_CURVE, a.TERM, a.AVG_PERIOD, a.IND_VOLATILITY, a.PERC_VOLATILITY;

TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_MA;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_MA;
CREATE TABLE MIS_TMP_${var:tabla}_MA AS 
SELECT a.DATA_DATE, a.COD_CONT, a.IDF_CTO, a.COD_GL, a.DES_GL, a.COD_ACCO_CENT, a.COD_OFFI, a.COD_BLCE_STATUS, a.COD_VALUE, a.COD_CURRENCY, a.COD_ENTITY, 
    a.COD_PRODUCT, a.COD_SUBPRODUCT, a.COD_ACT_TYPE, a.EOPBAL_CAP, a.EOPBAL_INT, a.AVGBAL_CAP, a.AVGBAL_INT, a.PL, a.COD_INFO_SOURCE, 
    a.COD_GL_GROUP, a.DES_GL_GROUP, a.ACCOUNT_CONCEPT, a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE, a.DES_BUSINESS_LINE, b.TTI AS FTP, a.FTP_RESULT, 'N' AS IND_POOL, 
    a.DATE_ORIGIN, a.EXP_DATE, a.DATE_LAST_REV, b.METHOD_TTI, a.COD_SEGMENT, a.COD_AMRT_MET --NOTA: 칔LTIMAS 4 COLUMNAS AGREGADAS 
FROM (SELECT a.* FROM MIS_TMP_${var:tabla}_INI a WHERE a.FTP IS NULL) a 
INNER JOIN MIS_TMP_${var:tabla}_TTI_MA b 
ON a.COD_BLCE_PROD = b.COD_BLCE_PROD AND a.COD_CURRENCY = b.COD_CURRENCY AND a.COD_BLCE_STATUS = b.COD_BLCE_STATUS
    AND IF(TRIM(b.COD_BUSINESS_LINE)='', '', a.COD_BUSINESS_LINE) = TRIM(b.COD_BUSINESS_LINE)
    AND IF(TRIM(b.COD_SEGMENT)='', '', a.COD_SEGMENT) = TRIM(b.COD_SEGMENT)
    AND (IF(a.COD_AMRT_MET IS NULL OR TRIM(a.COD_AMRT_MET) = '', 'NA', a.COD_AMRT_MET)=
    IF(b.COD_AMRT_MET IS NULL OR TRIM(b.COD_AMRT_MET) = '', 'NA', b.COD_AMRT_MET)
	OR ((TRIM(b.COD_AMRT_MET) <> TRIM(a.COD_AMRT_MET)) AND TRIM(b.COD_AMRT_MET) <> ''));

--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_TTI_MA;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_TTI_MA;


----Actualizaci칩n del FTP de DWH_ASSETS de contratos que entran por m칠todo
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_MET;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_MET;
CREATE TABLE MIS_TMP_${var:tabla}_MET AS 
SELECT a.DATA_DATE, a.COD_CONT, a.IDF_CTO, a.COD_GL, a.DES_GL, a.COD_ACCO_CENT, a.COD_OFFI, a.COD_BLCE_STATUS, a.COD_VALUE, a.COD_CURRENCY, a.COD_ENTITY, 
    a.COD_PRODUCT, a.COD_SUBPRODUCT, a.COD_ACT_TYPE, a.EOPBAL_CAP, a.EOPBAL_INT, a.AVGBAL_CAP, a.AVGBAL_INT, a.PL, a.COD_INFO_SOURCE, 
    a.COD_GL_GROUP, a.DES_GL_GROUP, a.ACCOUNT_CONCEPT, a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE, a.DES_BUSINESS_LINE, a.FTP, a.FTP_RESULT, a.IND_POOL, 
    a.DATE_ORIGIN, a.EXP_DATE, a.DATE_LAST_REV, a.METHOD_TTI, a.COD_SEGMENT, a.COD_AMRT_MET
FROM MIS_TMP_${var:tabla}_STERM2 a
UNION ALL
SELECT b.DATA_DATE, b.COD_CONT, b.IDF_CTO, b.COD_GL, b.DES_GL, b.COD_ACCO_CENT, b.COD_OFFI, b.COD_BLCE_STATUS, b.COD_VALUE, b.COD_CURRENCY, b.COD_ENTITY, 
    b.COD_PRODUCT, b.COD_SUBPRODUCT, b.COD_ACT_TYPE, b.EOPBAL_CAP, b.EOPBAL_INT, b.AVGBAL_CAP, b.AVGBAL_INT, b.PL, b.COD_INFO_SOURCE, 
    b.COD_GL_GROUP, b.DES_GL_GROUP, b.ACCOUNT_CONCEPT, b.COD_PL_ACC, b.DES_PL_ACC, b.COD_BLCE_PROD, b.DES_BLCE_PROD, 
    b.COD_BUSINESS_LINE, b.DES_BUSINESS_LINE, b.FTP, b.FTP_RESULT, b.IND_POOL, 
    b.DATE_ORIGIN, b.EXP_DATE, b.DATE_LAST_REV, b.METHOD_TTI, b.COD_SEGMENT, b.COD_AMRT_MET
FROM MIS_TMP_${var:tabla}_MA b;

TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_UNI;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_UNI;
CREATE TABLE MIS_TMP_${var:tabla}_UNI AS 
SELECT a.DATA_DATE, a.COD_CONT, a.IDF_CTO, a.COD_GL, a.DES_GL, a.COD_ACCO_CENT, a.COD_OFFI, a.COD_BLCE_STATUS, a.COD_VALUE, a.COD_CURRENCY, a.COD_ENTITY, 
    a.COD_PRODUCT, a.COD_SUBPRODUCT, a.COD_ACT_TYPE, a.EOPBAL_CAP, a.EOPBAL_INT, a.AVGBAL_CAP, a.AVGBAL_INT, a.PL, a.COD_INFO_SOURCE, 
    a.COD_GL_GROUP, a.DES_GL_GROUP, a.ACCOUNT_CONCEPT, a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE, a.DES_BUSINESS_LINE, 
    IF(b.IDF_CTO IS NOT NULL, b.FTP, a.FTP) AS FTP, 
    IF(b.IDF_CTO IS NOT NULL, b.FTP_RESULT, a.FTP_RESULT) AS FTP_RESULT,
    IF(b.IDF_CTO IS NOT NULL, b.IND_POOL, a.IND_POOL) AS IND_POOL,
    a.DATE_ORIGIN, a.EXP_DATE, a.DATE_LAST_REV, 
    IF(b.IDF_CTO IS NOT NULL, b.METHOD_TTI, a.COD_METHOD) AS COD_METHOD, a.IND_VOLATILITY, a.COD_BCA_INT, a.COD_SEGMENT, a.COD_AMRT_MET,
    ROW_NUMBER() OVER (PARTITION BY a.DATA_DATE, a.IDF_CTO, a.COD_VALUE ORDER BY a.COD_METHOD) AS RN
FROM MIS_TMP_${var:tabla}_INI a 
LEFT JOIN MIS_TMP_${var:tabla}_MET b 
ON a.DATA_DATE = b.DATA_DATE AND a.IDF_CTO = b.IDF_CTO AND a.COD_CONT = b.COD_CONT AND a.COD_METHOD = b.METHOD_TTI
    AND a.COD_VALUE = b.COD_VALUE AND a.COD_CURRENCY = b.COD_CURRENCY AND a.COD_ENTITY = b.COD_ENTITY 
    /*AND a.COD_PRODUCT = b.COD_PRODUCT AND a.COD_SUBPRODUCT = b.COD_SUBPRODUCT*/
    AND b.COD_INFO_SOURCE = b.COD_INFO_SOURCE AND a.COD_BLCE_PROD = b.COD_BLCE_PROD;


-------- C치lculo de tasa para spread de liquidez, peaje, encaje y portafolio m칤nimo
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_LPE;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_LPE;
CREATE TABLE MIS_TMP_${var:tabla}_LPE AS 
SELECT ISNULL(PAR_LIQ.COD_CURVE_LIQ,PAR_LIQ2.COD_CURVE_LIQ) AS COD_CURVE, ISNULL(PAR_LIQ.IND_SPREAD,PAR_LIQ2.IND_SPREAD) AS IND_SPREAD, DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, 
    DWH.COD_ENTITY, DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, DWH.COD_ACT_TYPE, DWH.EOPBAL_CAP, DWH.EOPBAL_INT, DWH.AVGBAL_CAP, DWH.AVGBAL_INT, DWH.PL, 
    'ENG LIQ' AS COD_INFO_SOURCE, DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, 
    DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'LIQ' END AS COD_METHOD1, CAST(CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 0 ELSE TTI.RATE_LIQ END AS DECIMAL(30, 10)) AS FTP, DWH.FTP_RESULT, DWH.IND_POOL,  
    DWH.DATA_DATE, DWH.DATE_ORIGIN, DWH.EXP_DATE, DWH.DATE_LAST_REV, DWH.DATE_PRX_REV, DWH.COD_RATE_TYPE, DWH.RATE_INT, 
    CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'LIQ' END AS COD_METHOD, DWH.IND_VOLATILITY, DWH.COD_BCA_INT, DWH.COD_SEGMENT, DWH.COD_AMRT_MET,
    CASE
        WHEN DWH.COD_RATE_TYPE IN ('V', 'A') AND ISNULL(PAR_LIQ.METHOD_LIQ,PAR_LIQ2.METHOD_LIQ) = 'EX'
        THEN ROUND(DATEDIFF(TO_TIMESTAMP(DWH.EXP_DATE,'yyyyMMdd'),TO_TIMESTAMP(DWH.DATE_ORIGIN,'yyyyMMdd')) * ISNULL(PAR_LIQ.TERM_FACTOR_LIQ,PAR_LIQ2.TERM_FACTOR_LIQ),0)
        WHEN DWH.COD_RATE_TYPE IN ('V', 'A') AND ISNULL(PAR_LIQ.METHOD_LIQ,PAR_LIQ2.METHOD_LIQ) = 'ST'
        THEN DATEDIFF(TO_TIMESTAMP(DWH.EXP_DATE,'yyyyMMdd'),TO_TIMESTAMP(DWH.DATE_ORIGIN,'yyyyMMdd'))
        ELSE NULL
    END AS NUMDIAS
FROM
    (SELECT INI.* 
    FROM MIS_TMP_${var:tabla}_INI INI
    WHERE INI.COD_RATE_TYPE IN ('V', 'A') 
    ) DWH
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE COD_CURVE_LIQ IS NOT NULL AND TRIM(COD_CURVE_LIQ) <> '') PAR_LIQ ----Registros para liquidez
ON PAR_LIQ.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_LIQ.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_LIQ.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_LIQ.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_LIQ.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_LIQ.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_LIQ.COD_SEGMENT)
    AND (IF(DWH.COD_AMRT_MET IS NULL OR TRIM(DWH.COD_AMRT_MET) = '', 'NA', DWH.COD_AMRT_MET)=
    IF(PAR_LIQ.COD_AMRT_MET IS NULL OR TRIM(PAR_LIQ.COD_AMRT_MET) = '', 'NA', PAR_LIQ.COD_AMRT_MET))
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '' AND COD_CURVE_LIQ IS NOT NULL AND TRIM(COD_CURVE_LIQ) <> '') PAR_LIQ2 ----Registros para liquidez
ON PAR_LIQ2.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_LIQ2.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_LIQ2.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_LIQ2.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_LIQ2.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_LIQ2.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_LIQ2.COD_SEGMENT)
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_SPE TTI WHERE TTI.RATE_LIQ IS NOT NULL AND TTI.DATA_DATE = '${var:periodo}') TTI  
ON REGEXP_REPLACE(DWH.IDF_CTO, '^0*', '') = REGEXP_REPLACE(TTI.IDF_CTO, '^0*', '') AND DWH.COD_VALUE IN ('CAP','INT')
AND DWH.COD_VALUE = TTI.COD_VALUE
LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT WHERE DATA_DATE = '${var:periodo}') DT
ON DWH.DATA_DATE=DT.DATA_DATE AND DWH.IDF_CTO=DT.IDF_CTO AND DWH.COD_ENTITY=DT.COD_ENTITY
WHERE (PAR_LIQ.COD_BLCE_PROD IS NOT NULL OR PAR_LIQ2.COD_BLCE_PROD IS NOT NULL)
UNION ALL
SELECT ISNULL(PAR_PEAJE.COD_CURVE_PEA,PAR_PEAJE2.COD_CURVE_PEA) AS COD_CURVE, ISNULL(PAR_PEAJE.IND_SPREAD,PAR_PEAJE2.IND_SPREAD) AS IND_SPREAD, DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, 
    DWH.COD_ENTITY, DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, DWH.COD_ACT_TYPE, DWH.EOPBAL_CAP, DWH.EOPBAL_INT, DWH.AVGBAL_CAP, DWH.AVGBAL_INT, DWH.PL, 
    'ENG PEAJE' AS COD_INFO_SOURCE, DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, 
    DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'PEA' END AS COD_METHOD1, CAST(CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 0 ELSE TTI.RATE_PEA END AS DECIMAL(30, 10)) AS FTP, DWH.FTP_RESULT, DWH.IND_POOL, 
    DWH.DATA_DATE, DWH.DATE_ORIGIN, DWH.EXP_DATE, DWH.DATE_LAST_REV, DWH.DATE_PRX_REV, DWH.COD_RATE_TYPE, DWH.RATE_INT, 
    CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'PEA' END AS COD_METHOD, DWH.IND_VOLATILITY, DWH.COD_BCA_INT, DWH.COD_SEGMENT, DWH.COD_AMRT_MET,
    1 AS NUMDIAS
FROM
    (SELECT INI.* 
    FROM MIS_TMP_${var:tabla}_INI INI 
    ) DWH
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE COD_CURVE_PEA IS NOT NULL AND TRIM(COD_CURVE_PEA) <> '') PAR_PEAJE ----Registros para peaje
ON PAR_PEAJE.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_PEAJE.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_PEAJE.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_PEAJE.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_PEAJE.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_PEAJE.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_PEAJE.COD_SEGMENT)
    AND (IF(DWH.COD_AMRT_MET IS NULL OR TRIM(DWH.COD_AMRT_MET) = '', 'NA', DWH.COD_AMRT_MET)=
    IF(PAR_PEAJE.COD_AMRT_MET IS NULL OR TRIM(PAR_PEAJE.COD_AMRT_MET) = '', 'NA', PAR_PEAJE.COD_AMRT_MET))
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '' AND COD_CURVE_PEA IS NOT NULL AND TRIM(COD_CURVE_PEA) <> '') PAR_PEAJE2 ----Registros para peaje
ON PAR_PEAJE2.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_PEAJE2.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS 
    AND PAR_PEAJE2.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_PEAJE2.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_PEAJE2.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_PEAJE2.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_PEAJE2.COD_SEGMENT)
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_SPE TTI WHERE TTI.RATE_PEA IS NOT NULL AND TTI.DATA_DATE = '${var:periodo}') TTI  
ON REGEXP_REPLACE(DWH.IDF_CTO, '^0*', '') = REGEXP_REPLACE(TTI.IDF_CTO, '^0*', '') AND DWH.COD_VALUE IN ('CAP','INT')
AND DWH.COD_VALUE = TTI.COD_VALUE
LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT WHERE DATA_DATE = '${var:periodo}') DT
ON DWH.DATA_DATE=DT.DATA_DATE AND DWH.IDF_CTO=DT.IDF_CTO AND DWH.COD_ENTITY=DT.COD_ENTITY
WHERE (PAR_PEAJE.COD_BLCE_PROD IS NOT NULL OR PAR_PEAJE2.COD_BLCE_PROD IS NOT NULL)
UNION ALL
SELECT ISNULL(PAR_ENC.COD_CURVE_ENC,PAR_ENC2.COD_CURVE_ENC) AS COD_CURVE, ISNULL(PAR_ENC.IND_SPREAD,PAR_ENC2.IND_SPREAD) AS IND_SPREAD, DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, 
    DWH.COD_ENTITY, DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, DWH.COD_ACT_TYPE, DWH.EOPBAL_CAP, DWH.EOPBAL_INT, DWH.AVGBAL_CAP, DWH.AVGBAL_INT, DWH.PL, 
    'ENG ENC' AS COD_INFO_SOURCE, DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, 
    DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'ENC' END AS COD_METHOD1, CAST(CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 0 ELSE TTI.RATE_ENC END AS DECIMAL(30, 10)) AS FTP, DWH.FTP_RESULT, DWH.IND_POOL, 
    DWH.DATA_DATE, DWH.DATE_ORIGIN, DWH.EXP_DATE, DWH.DATE_LAST_REV, DWH.DATE_PRX_REV, DWH.COD_RATE_TYPE, DWH.RATE_INT,
    CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'ENC' END AS COD_METHOD, DWH.IND_VOLATILITY, DWH.COD_BCA_INT, DWH.COD_SEGMENT, DWH.COD_AMRT_MET,
    1 AS NUMDIAS
FROM
    (SELECT INI.* 
    FROM MIS_TMP_${var:tabla}_INI INI 
    ) DWH
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE COD_CURVE_ENC IS NOT NULL AND TRIM(COD_CURVE_ENC) <> '') PAR_ENC ----Registros para encaje
ON PAR_ENC.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_ENC.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_ENC.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_ENC.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_ENC.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_ENC.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_ENC.COD_SEGMENT)
    AND (IF(DWH.COD_AMRT_MET IS NULL OR TRIM(DWH.COD_AMRT_MET) = '', 'NA', DWH.COD_AMRT_MET)=
    IF(PAR_ENC.COD_AMRT_MET IS NULL OR TRIM(PAR_ENC.COD_AMRT_MET) = '', 'NA', PAR_ENC.COD_AMRT_MET))
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '' AND COD_CURVE_ENC IS NOT NULL AND TRIM(COD_CURVE_ENC) <> '') PAR_ENC2 ----Registros para encaje
ON PAR_ENC2.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_ENC2.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_ENC2.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_ENC2.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_ENC2.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_ENC2.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_ENC2.COD_SEGMENT)
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_SPE TTI WHERE TTI.RATE_ENC IS NOT NULL AND TTI.DATA_DATE = '${var:periodo}') TTI  
ON REGEXP_REPLACE(DWH.IDF_CTO, '^0*', '') = REGEXP_REPLACE(TTI.IDF_CTO, '^0*', '') AND DWH.COD_VALUE IN ('CAP','INT')
AND DWH.COD_VALUE = TTI.COD_VALUE
LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT WHERE DATA_DATE = '${var:periodo}') DT
ON DWH.DATA_DATE=DT.DATA_DATE AND DWH.IDF_CTO=DT.IDF_CTO AND DWH.COD_ENTITY=DT.COD_ENTITY
WHERE (PAR_ENC.COD_BLCE_PROD IS NOT NULL OR PAR_ENC2.COD_BLCE_PROD IS NOT NULL)
UNION ALL
SELECT ISNULL(PAR_POR.COD_CURVE_POR,PAR_POR2.COD_CURVE_POR) AS COD_CURVE, ISNULL(PAR_POR.IND_SPREAD,PAR_POR2.IND_SPREAD) AS IND_SPREAD, DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, 
    DWH.COD_ENTITY, DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, DWH.COD_ACT_TYPE, DWH.EOPBAL_CAP, DWH.EOPBAL_INT, DWH.AVGBAL_CAP, DWH.AVGBAL_INT, DWH.PL, 
    'ENG POR' AS COD_INFO_SOURCE, DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, 
    DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'POR' END AS COD_METHOD1, CAST(CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 0 ELSE TTI.RATE_POR END AS DECIMAL(30, 10)) AS FTP, DWH.FTP_RESULT, DWH.IND_POOL, 
    DWH.DATA_DATE, DWH.DATE_ORIGIN, DWH.EXP_DATE, DWH.DATE_LAST_REV, DWH.DATE_PRX_REV, DWH.COD_RATE_TYPE, DWH.RATE_INT, 
    CASE WHEN DT.CARD_NUMBER IS NOT NULL AND DWH.EOPBAL_CAP < 0 THEN 'NEG' ELSE 'POR' END AS COD_METHOD, DWH.IND_VOLATILITY, DWH.COD_BCA_INT, DWH.COD_SEGMENT, DWH.COD_AMRT_MET,
    1 AS NUMDIAS
FROM
    (SELECT INI.* 
    FROM MIS_TMP_${var:tabla}_INI INI 
    ) DWH
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE COD_CURVE_POR IS NOT NULL AND TRIM(COD_CURVE_POR) <> '') PAR_POR ----Registros para portafolio m칤nimo
ON PAR_POR.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_POR.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_POR.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_POR.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_POR.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_POR.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_POR.COD_SEGMENT)
    AND (IF(DWH.COD_AMRT_MET IS NULL OR TRIM(DWH.COD_AMRT_MET) = '', 'NA', DWH.COD_AMRT_MET)=
    IF(PAR_POR.COD_AMRT_MET IS NULL OR TRIM(PAR_POR.COD_AMRT_MET) = '', 'NA', PAR_POR.COD_AMRT_MET))
LEFT JOIN 
    (SELECT * FROM MIS_PAR_TTI_ENG WHERE TRIM(COD_AMRT_MET) = '' AND COD_CURVE_POR IS NOT NULL AND TRIM(COD_CURVE_POR) <> '') PAR_POR2 ----Registros para portafolio m칤nimo
ON PAR_POR2.COD_BLCE_PROD=DWH.COD_BLCE_PROD AND PAR_POR2.COD_BLCE_STATUS=DWH.COD_BLCE_STATUS AND PAR_POR2.COD_CURRENCY=DWH.COD_CURRENCY
    AND IF(TRIM(PAR_POR2.COD_BUSINESS_LINE)='', '', DWH.COD_BUSINESS_LINE) = TRIM(PAR_POR2.COD_BUSINESS_LINE) 
    AND IF(TRIM(PAR_POR2.COD_SEGMENT)='', '', DWH.COD_SEGMENT) = TRIM(PAR_POR2.COD_SEGMENT)
LEFT JOIN (SELECT * FROM MIS_PAR_TTI_SPE TTI WHERE TTI.RATE_POR IS NOT NULL AND TTI.DATA_DATE = '${var:periodo}') TTI  
ON REGEXP_REPLACE(DWH.IDF_CTO, '^0*', '') = REGEXP_REPLACE(TTI.IDF_CTO, '^0*', '') AND DWH.COD_VALUE IN ('CAP','INT')
AND DWH.COD_VALUE = TTI.COD_VALUE
LEFT JOIN (SELECT * FROM MIS_APR_CONTRACT_DT WHERE DATA_DATE = '${var:periodo}') DT
ON DWH.DATA_DATE=DT.DATA_DATE AND DWH.IDF_CTO=DT.IDF_CTO AND DWH.COD_ENTITY=DT.COD_ENTITY
WHERE (PAR_POR.COD_BLCE_PROD IS NOT NULL OR PAR_POR2.COD_BLCE_PROD IS NOT NULL)
;

--COMPUTE STATS MIS_TMP_${var:tabla}_UNI;
--COMPUTE STATS MIS_TMP_${var:tabla}_LPE;

TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_UPD;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_UPD;
CREATE TABLE MIS_TMP_${var:tabla}_UPD AS 
SELECT a.DATA_DATE, a.COD_CONT, a.IDF_CTO, a.COD_GL, a.DES_GL, a.COD_ACCO_CENT, a.COD_OFFI, a.COD_BLCE_STATUS, a.COD_VALUE, a.COD_CURRENCY, a.COD_ENTITY, 
    a.COD_PRODUCT, a.COD_SUBPRODUCT, a.COD_ACT_TYPE, a.EOPBAL_CAP, a.EOPBAL_INT, a.AVGBAL_CAP, a.AVGBAL_INT, a.PL,  a.COD_INFO_SOURCE, 
    a.COD_GL_GROUP, a.DES_GL_GROUP, a.ACCOUNT_CONCEPT, a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE, a.DES_BUSINESS_LINE, 
    a.COD_METHOD AS COD_METHOD1, a.FTP AS FTP1, b.COD_METHOD AS COD_METHOD2, b.FTP AS FTP2,
    a.FTP_RESULT, a.IND_POOL, a.DATE_ORIGIN, a.EXP_DATE, a.DATE_LAST_REV, a.IND_VOLATILITY, a.COD_BCA_INT, a.COD_SEGMENT, a.COD_AMRT_MET
FROM (SELECT * FROM MIS_TMP_${var:tabla}_UNI WHERE RN = 1) a 
LEFT JOIN (SELECT * FROM MIS_TMP_${var:tabla}_UNI WHERE RN = 2) b 
ON a.DATA_DATE = b.DATA_DATE AND a.IDF_CTO = b.IDF_CTO AND a.COD_CONT = b.COD_CONT AND a.COD_BLCE_STATUS = b.COD_BLCE_STATUS AND a.COD_VALUE = b.COD_VALUE 
    AND a.COD_CURRENCY = b.COD_CURRENCY AND a.COD_ENTITY = b.COD_ENTITY 
    /*AND a.COD_PRODUCT = b.COD_PRODUCT AND a.COD_SUBPRODUCT = b.COD_SUBPRODUCT*/ 
    AND b.COD_INFO_SOURCE = b.COD_INFO_SOURCE AND a.COD_BLCE_PROD = b.COD_BLCE_PROD
UNION ALL --Liquidez, peaje, encaje y portafolio m칤nimo
SELECT LPE.DATA_DATE, LPE.COD_CONT, LPE.IDF_CTO, LPE.COD_GL, LPE.DES_GL, LPE.COD_ACCO_CENT, LPE.COD_OFFI, LPE.COD_BLCE_STATUS, LPE.COD_VALUE, LPE.COD_CURRENCY,
    LPE.COD_ENTITY, LPE.COD_PRODUCT, LPE.COD_SUBPRODUCT, LPE.COD_ACT_TYPE, LPE.EOPBAL_CAP, LPE.EOPBAL_INT, LPE.AVGBAL_CAP, LPE.AVGBAL_INT, LPE.PL, LPE.COD_INFO_SOURCE, LPE.COD_GL_GROUP, LPE.DES_GL_GROUP,
    LPE.ACCOUNT_CONCEPT, LPE.COD_PL_ACC, LPE.DES_PL_ACC, LPE.COD_BLCE_PROD, LPE.DES_BLCE_PROD, LPE.COD_BUSINESS_LINE, LPE.DES_BUSINESS_LINE, LPE.COD_METHOD,
    CAST(CASE 
        WHEN LPE.FTP IS NOT NULL THEN LPE.FTP
        WHEN LPE.NUMDIAS > MCUR.TERM THEN MCUR.RATE 
        ELSE CUR.RATE
    END AS decimal(30, 10)) AS FTP1, NULL AS COD_METHOD2, 0 AS FTP2, CAST(NULL AS decimal(30, 10)) AS FTP_RESULT, 'N' AS IND_POOL, 
    LPE.DATE_ORIGIN, LPE.EXP_DATE, LPE.DATE_LAST_REV, LPE.IND_VOLATILITY, LPE.COD_BCA_INT, LPE.COD_SEGMENT, LPE.COD_AMRT_MET
FROM MIS_TMP_${var:tabla}_LPE LPE
LEFT JOIN (
    SELECT * 
    FROM MIS_APR_CONTRACT_DT TMP
    WHERE TO_TIMESTAMP(TMP.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), 1)
) DT_PREV 
ON TO_TIMESTAMP(DT_PREV.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(LPE.DATA_DATE, 'yyyyMMdd'), 1) AND 
    DT_PREV.IDF_CTO = LPE.IDF_CTO AND DT_PREV.COD_ENTITY = LPE.COD_ENTITY AND DT_PREV.COD_CURRENCY = LPE.COD_CURRENCY
LEFT JOIN (
    SELECT DISTINCT DATA_DATE, IDF_CTO, COD_VALUE, COD_ENTITY FROM MIS_DWH_${var:tabla} 
    WHERE TO_TIMESTAMP(DATA_DATE, 'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}','yyyyMMdd'), 1) ) DWHP
ON TO_TIMESTAMP(DWHP.DATA_DATE, 'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(LPE.DATA_DATE,'yyyyMMdd'), 1) 
   AND DWHP.IDF_CTO=LPE.IDF_CTO AND DWHP.COD_VALUE = LPE.COD_VALUE AND DWHP.COD_ENTITY = LPE.COD_ENTITY
LEFT JOIN MIS_PAR_CURVES CUR 
ON LPE.COD_CURVE=CUR.COD_CURVE AND LPE.COD_CURRENCY=CUR.COD_CURRENCY 
     AND (LPE.DATE_ORIGIN = LPE.DATA_DATE OR (DT_PREV.COD_RATE_TYPE = 'F' AND LPE.COD_RATE_TYPE = 'V') 
             OR (DWHP.IDF_CTO IS NULL AND ISNULL(LPE.DATE_ORIGIN,'0') < ISNULL(LPE.DATA_DATE,'0'))
    ) AND 
    (CASE WHEN LPE.COD_RATE_TYPE = 'A' AND LPE.DATE_ORIGIN = LPE.DATA_DATE THEN LPE.DATE_ORIGIN 
        WHEN LPE.COD_RATE_TYPE = 'A' THEN LPE.DATE_LAST_REV 
        WHEN DT_PREV.COD_RATE_TYPE = 'F' AND LPE.COD_RATE_TYPE = 'V' THEN LPE.DATA_DATE 
        ELSE LPE.DATE_ORIGIN END = CUR.DATA_DATE) AND LPE.NUMDIAS = CUR.TERM
LEFT JOIN MIS_TMP_${var:tabla}_MAX_CURVE MCUR
ON LPE.COD_CURVE=MCUR.COD_CURVE AND LPE.COD_CURRENCY=MCUR.COD_CURRENCY 
    AND (LPE.DATE_ORIGIN = LPE.DATA_DATE OR (DT_PREV.COD_RATE_TYPE = 'F' AND LPE.COD_RATE_TYPE = 'V')
             OR (DWHP.IDF_CTO IS NULL AND ISNULL(LPE.DATE_ORIGIN,'0') < ISNULL(LPE.DATA_DATE,'0')) 
    ) AND 
    (CASE WHEN LPE.COD_RATE_TYPE = 'A' AND LPE.DATE_ORIGIN = LPE.DATA_DATE THEN LPE.DATE_ORIGIN 
        WHEN LPE.COD_RATE_TYPE = 'A' THEN LPE.DATE_LAST_REV 
        WHEN DT_PREV.COD_RATE_TYPE = 'F' AND LPE.COD_RATE_TYPE = 'V' THEN LPE.DATA_DATE 
        ELSE LPE.DATE_ORIGIN END = MCUR.DATA_DATE) AND LPE.NUMDIAS > MCUR.TERM
;

----Eliminaci칩n de tablas temporales 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM2;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_STERM2;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_MA;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_MA;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_MET;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_MET;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_INI;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_INI;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_UNI;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_UNI;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_LPE; 
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_LPE; 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_MAX_CURVE;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_MAX_CURVE;

--COMPUTE STATS MIS_TMP_${var:tabla}_UPD;

----Propagaci칩n de TTI para casos a los que no se les c치lculo TTI 
TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_FTP;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_FTP;
CREATE TABLE MIS_TMP_${var:tabla}_FTP AS 
SELECT DWH.DATA_DATE, DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, DWH.COD_ACT_TYPE, DWH.EOPBAL_CAP, DWH.EOPBAL_INT, DWH.AVGBAL_CAP, DWH.AVGBAL_INT, DWH.PL, ISNULL(DM.COD_INFO_SOURCE,DWH.COD_INFO_SOURCE) AS COD_INFO_SOURCE, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, 
    DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_METHOD1,
    CASE WHEN DWH.FTP1 IS NOT NULL THEN DWH.FTP1
        WHEN DM.COD_METHOD1 = 'SP' THEN ISNULL(DM.FTP1, 0)
        WHEN DWH.IND_VOLATILITY <> 'Y' THEN ISNULL(DM.FTP1, 0)
        WHEN DWH.COD_METHOD1 = DM.COD_METHOD1 THEN ISNULL(DM.FTP1, 0)
        WHEN DWH.COD_METHOD1 = DM.COD_METHOD2 THEN ISNULL(DM.FTP2, 0)
        ELSE 0
        END AS FTP1,
    IF(DWH.COD_METHOD2 IS NULL AND DWH.IND_VOLATILITY = 'Y', DWH.COD_METHOD1, DWH.COD_METHOD2) AS COD_METHOD2,
    CASE WHEN DWH.FTP2 IS NOT NULL THEN DWH.FTP2
        WHEN DWH.IND_VOLATILITY <> 'Y' THEN 0 --Cuando no tiene indicador de volatilidad, no debe tener un segundo FTP
        WHEN IF(DWH.COD_METHOD2 IS NULL, DWH.COD_METHOD1, DWH.COD_METHOD2) = DM.COD_METHOD2 THEN ISNULL(DM.FTP2, 0)
        WHEN IF(DWH.COD_METHOD2 IS NULL, DWH.COD_METHOD1, DWH.COD_METHOD2) = DM.COD_METHOD1 THEN ISNULL(DM.FTP1, 0)
        ELSE 0
        END AS FTP2,
    CAST(NULL AS decimal(30, 10)) AS FTP_RESULT, 'N' AS IND_POOL, 
    DWH.DATE_ORIGIN, DWH.EXP_DATE, DWH.DATE_LAST_REV, DWH.COD_BCA_INT, DWH.COD_SEGMENT, DWH.COD_AMRT_MET
FROM MIS_TMP_${var:tabla}_UPD DWH
INNER JOIN (SELECT * FROM MIS_TMP_${var:tabla}_UPD
WHERE COD_INFO_SOURCE = 'ENG TTI') APR
ON DWH.IDF_CTO = APR.IDF_CTO AND ISNULL(DWH.COD_ACCO_CENT,'0')=ISNULL(APR.COD_ACCO_CENT,'0') AND DWH.COD_BLCE_STATUS=APR.COD_BLCE_STATUS
    AND DWH.COD_PRODUCT=APR.COD_PRODUCT AND DWH.COD_SUBPRODUCT=APR.COD_SUBPRODUCT AND DWH.COD_VALUE=APR.COD_VALUE
LEFT JOIN (
    SELECT * 
    FROM MIS_DWH_${var:tabla} TMP
    WHERE COD_INFO_SOURCE NOT LIKE '%_M' AND (TMP.FTP1 <> 0 OR TMP.FTP2 <> 0) AND
    TO_TIMESTAMP(TMP.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), 1)
) DM --Propagar valor del d칤a anterior
ON TO_TIMESTAMP(DM.DATA_DATE, 'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(DWH.DATA_DATE,'yyyyMMdd'), 1) 
    AND DM.IND_POOL = 'N' AND DM.COD_CONT=DWH.COD_CONT AND DM.IDF_CTO=DWH.IDF_CTO 
    AND DM.COD_CURRENCY=DWH.COD_CURRENCY AND DM.COD_ENTITY=DWH.COD_ENTITY AND DM.COD_VALUE = DWH.COD_VALUE 
    AND DM.COD_INFO_SOURCE=DWH.COD_INFO_SOURCE;

----Eliminaci칩n de tablas temporales 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_UPD;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_UPD;

--COMPUTE STATS MIS_TMP_${var:tabla}_FTP;

TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_FINAL;
DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_FINAL;
CREATE TABLE MIS_TMP_${var:tabla}_FINAL AS  
SELECT TTP.DATA_DATE, TTP.COD_CONT, TTP.IDF_CTO, TTP.COD_GL, TTP.DES_GL, TTP.COD_ACCO_CENT, TTP.COD_OFFI, TTP.COD_BLCE_STATUS, TTP.COD_VALUE, TTP.COD_CURRENCY, TTP.COD_ENTITY, 
	TTP.COD_PRODUCT, TTP.COD_SUBPRODUCT, TTP.COD_ACT_TYPE, TTP.EOPBAL_CAP, TTP.EOPBAL_INT, TTP.AVGBAL_CAP, TTP.AVGBAL_INT, TTP.PL, TTP.COD_INFO_SOURCE, 
	TTP.COD_GL_GROUP, TTP.DES_GL_GROUP, TTP.ACCOUNT_CONCEPT, TTP.COD_PL_ACC, TTP.DES_PL_ACC, TTP.COD_BLCE_PROD, TTP.DES_BLCE_PROD, TTP.COD_SEGMENT, TTP.COD_AMRT_MET, 
	TTP.COD_BUSINESS_LINE, TTP.DES_BUSINESS_LINE, TTP.COD_METHOD1, CAST(TTP.FTP1 AS decimal(30, 10)) AS FTP1, TTP.COD_METHOD2, CAST(TTP.FTP2 AS decimal(30, 10)) AS FTP2,
    CAST(CASE TTP.COD_BCA_INT 
    WHEN 1
        THEN ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (1.0/DAYOFYEAR(TO_TIMESTAMP(CONCAT(CAST(YEAR(TO_TIMESTAMP('${var:periodo}','yyyyMMdd')) AS STRING),'12','31'),'yyyyMMdd')))),0)
    WHEN 2 
        THEN ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (1.0/360)),0)
    WHEN 3
        THEN ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (1.0/365)),0)
    WHEN 4
        THEN CASE WHEN DAY(LAST_DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'))) = 28 AND DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd')) = 28 
                THEN ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (3.0/360)),0)
             WHEN DAY(LAST_DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'))) = 31 AND DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd')) = 31
                THEN ISNULL(DM.FTP_RESULT,0)
             ELSE ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (1.0/360)),0)
             END
    WHEN 5
        THEN CASE WHEN DAY(LAST_DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'))) = 28 AND DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd')) = 28 
                THEN ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (3.0/365)),0)
             WHEN DAY(LAST_DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'))) = 31 AND DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd')) = 31
                THEN ISNULL(DM.FTP_RESULT,0)
             ELSE ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (1.0/365)),0)
             END
    ELSE ISNULL((TTP.EOPBAL_CAP * (TTP.FTP1 + TTP.FTP2) * (1.0/365)),0) 
    END
    + CASE WHEN strright(TTP.DATA_DATE,2) = '01' OR (TTP.COD_BCA_INT IN (4,5) AND (DAY(LAST_DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'))) = 31 AND DAY(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd')) = 31))
    THEN 0 
    ELSE ISNULL(DM.FTP_RESULT,0) 
    END AS DECIMAL(30, 10)) AS FTP_RESULT, TTP.IND_POOL
FROM MIS_TMP_${var:tabla}_FTP TTP 
LEFT JOIN (
    SELECT DISTINCT DATA_DATE, COD_CONT, IDF_CTO, COD_CURRENCY, COD_ENTITY, COD_VALUE, IND_POOL, COD_INFO_SOURCE, FTP_RESULT
    FROM MIS_DWH_${var:tabla} TMP
    WHERE TO_TIMESTAMP(TMP.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP('${var:periodo}', 'yyyyMMdd'), 1)
) DM 
ON TO_TIMESTAMP(DM.DATA_DATE,'yyyyMMdd') = DATE_SUB(TO_TIMESTAMP(TTP.DATA_DATE, 'yyyyMMdd'), 1)
    AND DM.COD_CONT=TTP.COD_CONT AND DM.IDF_CTO=TTP.IDF_CTO AND DM.COD_CURRENCY=TTP.COD_CURRENCY AND DM.COD_ENTITY=TTP.COD_ENTITY 
    AND DM.COD_VALUE=TTP.COD_VALUE AND DM.IND_POOL = TTP.IND_POOL AND DM.COD_INFO_SOURCE=TTP.COD_INFO_SOURCE;

----Eliminaci칩n de tablas temporales 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_FTP;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_FTP;
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_RES;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_RES;


----Actualizaci칩n final del FTP y FTP_RESULT en tabla DWH_ASSETS
ALTER TABLE MIS_DWH_${var:tabla} DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_INFO_SOURCE='ENG TTI');
ALTER TABLE MIS_DWH_${var:tabla} DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_INFO_SOURCE='ENG LIQ');
ALTER TABLE MIS_DWH_${var:tabla} DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_INFO_SOURCE='ENG PEAJE');
ALTER TABLE MIS_DWH_${var:tabla} DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_INFO_SOURCE='ENG ENC');
ALTER TABLE MIS_DWH_${var:tabla} DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_INFO_SOURCE='ENG POR');

--COMPUTE STATS MIS_TMP_${var:tabla}_FINAL;

INSERT INTO MIS_DWH_${var:tabla} PARTITION (DATA_DATE, COD_INFO_SOURCE)
SELECT TMP.COD_CONT, TMP.IDF_CTO, TMP.COD_GL, TMP.DES_GL, TMP.COD_ACCO_CENT, TMP.COD_OFFI, TMP.COD_BLCE_STATUS, TMP.COD_VALUE, TMP.COD_CURRENCY, TMP.COD_ENTITY, 
    TMP.COD_PRODUCT, TMP.COD_SUBPRODUCT, TMP.COD_ACT_TYPE, CAST(0 AS DECIMAL(30,10)), CAST(0 AS DECIMAL(30,10)), CAST(0 AS DECIMAL(30,10)), 
    CAST(0 AS DECIMAL(30,10)), CAST(0 AS DECIMAL(30,10)), 
    TMP.COD_GL_GROUP, TMP.DES_GL_GROUP, TMP.ACCOUNT_CONCEPT, 
    CONCAT('MAR_', 
        CASE WHEN '${var:tabla}'='ASSETS' THEN 'ACT' 
             WHEN '${var:tabla}'='LIABILITIES' THEN 'PAS' END, '_', STRLEFT(SPLIT_PART(TMP.COD_INFO_SOURCE, ' ',  2), 3)) AS COD_PL_ACC, 
    CONCAT('MARGEN DEL ', 
        CASE WHEN '${var:tabla}'='ASSETS' THEN 'ACTIVO' 
             WHEN '${var:tabla}'='LIABILITIES' THEN 'PASIVO' END, ' ', STRLEFT(SPLIT_PART(TMP.COD_INFO_SOURCE, ' ',  2), 3)) AS DES_PL_ACC, 
    TMP.COD_BLCE_PROD, TMP.DES_BLCE_PROD, 
    TMP.COD_BUSINESS_LINE, TMP.DES_BUSINESS_LINE, TMP.COD_METHOD1, CASE WHEN DWH.IDF_CTO IS NULL THEN 0 ELSE TMP.FTP1 END AS FTP1, TMP.COD_METHOD2, CASE WHEN DWH.IDF_CTO IS NULL THEN 0 ELSE TMP.FTP2 END AS FTP2, TMP.FTP_RESULT, TMP.IND_POOL, 
    TMP.DATA_DATE, TMP.COD_INFO_SOURCE 
FROM MIS_TMP_${var:tabla}_FINAL TMP
LEFT JOIN (SELECT DISTINCT IDF_CTO FROM MIS_DWH_${var:tabla} WHERE DATA_DATE = '${var:periodo}' AND COD_VALUE IN ('CAP','INT') AND IND_POOL IS NULL AND STRRIGHT(COD_INFO_SOURCE,2) <> '_M') DWH
ON TMP.IDF_CTO = DWH.IDF_CTO
--WHERE (TMP.FTP1 + TMP.FTP2) != 0
;

----Eliminaci칩n de tablas temporales 
--TRUNCATE TABLE IF EXISTS MIS_TMP_${var:tabla}_FINAL;
--DROP TABLE IF EXISTS MIS_TMP_${var:tabla}_FINAL;


----Inserci칩n de registros por Pool de fondos
INSERT INTO MIS_DWH_${var:tabla} PARTITION (DATA_DATE, COD_INFO_SOURCE)
SELECT DWH.COD_CONT, DWH.IDF_CTO, DWH.COD_GL, DWH.DES_GL, DWH.COD_ACCO_CENT, DWH.COD_OFFI, DWH.COD_BLCE_STATUS, DWH.COD_VALUE, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    DWH.COD_PRODUCT, DWH.COD_SUBPRODUCT, DWH.COD_ACT_TYPE, 0 AS EOPBAL_CAP, 0 AS EOPBAL_INT, 0 AS AVGBAL_CAP, 0 AS AVGBAL_INT, 0 AS PL, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, 
    'UNIDAD_FONDEO' AS COD_BUSINESS_LINE, 'UNIDAD DE FONDEO' AS DES_BUSINESS_LINE, DWH.COD_METHOD1, DWH.FTP1, DWH.COD_METHOD2, DWH.FTP2, 
    CAST(-1*DWH.FTP_RESULT AS decimal(30, 10)) AS FTP_RESULT, 'Y' AS IND_POOL, DWH.DATA_DATE, DWH.COD_INFO_SOURCE   
FROM MIS_DWH_${var:tabla} DWH 
WHERE DWH.DATA_DATE = '${var:periodo}' AND DWH.COD_VALUE <> 'RSL' AND DWH.IND_POOL = 'N' AND DWH.FTP1 IS NOT NULL;