----------------------------------------------------------- MOTOR DE REPARTOS INTERNEGOCIOS -----------------------------------------------------------

USE ${var:base_datos};
SET DECIMAL_V2=FALSE;

------------ Creación de la tabla Repartos vs Descripción Negocio  ------------
DROP TABLE IF EXISTS MIS_TMP_PAR_INTER; 
CREATE TABLE MIS_TMP_PAR_INTER AS 
SELECT a.*, b.DES_BUSINESS_LINE AS DES_BUSINESS_LINE_DESTINY 
FROM MIS_PAR_INTER_ENG a 
LEFT JOIN MIS_PAR_CAT_BL b
ON a.COD_BUSINESS_LINE_DESTINY=b.COD_BUSINESS_LINE;


------------ Unión de contratos y movimientos a repartir ------------
DROP TABLE IF EXISTS MIS_TMP_INTER_PL; 
CREATE TABLE MIS_TMP_INTER_PL AS 
SELECT DATA_DATE, COD_ACCO_CENT, COD_OFFI, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, FTP_RESULT, IND_POOL 
FROM MIS_DWH_ASSETS 
WHERE DATA_DATE='${var:periodo}'AND (IFNULL(PL, 0)<>0 OR IFNULL(FTP_RESULT, 0)<>0) 
UNION ALL 
SELECT DATA_DATE, COD_ACCO_CENT, COD_OFFI, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, FTP_RESULT, IND_POOL 
FROM MIS_DWH_LIABILITIES 
WHERE DATA_DATE='${var:periodo}' AND (IFNULL(PL, 0)<>0 OR IFNULL(FTP_RESULT, 0)<>0) 
UNION ALL 
SELECT DATA_DATE, COD_ACCO_CENT, COD_OFFI, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, FTP_RESULT, IND_POOL 
FROM MIS_DWH_OFF_BALANCE 
WHERE DATA_DATE='${var:periodo}' AND (IFNULL(PL, 0)<>0 OR IFNULL(FTP_RESULT, 0)<>0) 
UNION ALL 
SELECT DATA_DATE, COD_ACCO_CENT, COD_OFFI, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, FTP_RESULT, IND_POOL 
FROM MIS_DWH_FEES 
WHERE DATA_DATE='${var:periodo}' AND (IFNULL(PL, 0)<>0 OR IFNULL(FTP_RESULT, 0)<>0);


------------ Suma de valor de contratos y cálculo del reparto ------------
DROP TABLE IF EXISTS MIS_TMP_INTER_ALLOC; 
CREATE TABLE MIS_TMP_INTER_ALLOC AS 
SELECT a.*,
    b.COD_BUSINESS_LINE_DESTINY, b.ALLOCATION_PERC, b.DES_BUSINESS_LINE_DESTINY,
    CAST((a.PL * b.ALLOCATION_PERC) AS decimal(15, 2)) AS ALLOC_PL_POS,
    CAST((a.FTP_RESULT * b.ALLOCATION_PERC) AS decimal(15, 2)) AS ALLOC_FTP_POS,
    CAST((-1 * a.PL * b.ALLOCATION_PERC) AS decimal(15, 2)) AS ALLOC_PL_NEG,
    CAST((-1 * a.FTP_RESULT * b.ALLOCATION_PERC) AS decimal(15, 2)) AS ALLOC_FTP_NEG
FROM (           
    SELECT DATA_DATE, COD_ACCO_CENT, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, SUM(PL) AS PL, COD_PL_ACC, DES_PL_ACC,
        COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE AS COD_BUSINESS_LINE_ORIGIN, DES_BUSINESS_LINE AS DES_BUSINESS_LINE_ORIGIN, 
        SUM(FTP_RESULT) AS FTP_RESULT, IND_POOL
    FROM MIS_TMP_INTER_PL
    GROUP BY DATA_DATE, COD_ACCO_CENT, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, COD_PL_ACC, DES_PL_ACC, COD_BLCE_PROD, 
        DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, IND_POOL) a
INNER JOIN MIS_TMP_PAR_INTER b
ON a.COD_ENTITY=b.COD_ENTITY AND a.COD_BLCE_PROD=b.COD_BLCE_PROD 
    AND a.COD_PL_ACC=b.COD_PL_ACC AND a.COD_BUSINESS_LINE_ORIGIN=b.COD_BUSINESS_LINE_ORIGIN; 

------------ Limpieza de partición ------------
ALTER TABLE MIS_DWH_RECONCILIATION
DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_CONT = 'RCIN');

------------ Inserción de reparto positivo a la línea de negocio destino -----------
INSERT INTO MIS_DWH_RECONCILIATION PARTITION (DATA_DATE, COD_CONT) --TODO: DEBERÍA AGRUPAR LOS RESULTADOS ANTES DE INSERTARLOS?
SELECT a.COD_ACCO_CENT, NULL AS COD_OFFI, NULL AS COD_NAR, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.COD_ENTITY, 
    0 AS EOPBAL_CAP, 0 AS EOPBAL_INT, 0 AS AVGBAL_CAP, 0 AS AVGBAL_INT, CAST(SUM(a.ALLOC_PL_POS) AS decimal(30, 10)) AS PL, 
    'RECL' AS COD_INFO_SOURCE, 'N/A' AS COD_GL_GROUP, 'N/A' AS DES_GL_GROUP, 'N/A' AS ACCOUNT_CONCEPT, 
    a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE_DESTINY AS COD_BUSINESS_LINE, a.DES_BUSINESS_LINE_DESTINY AS DES_BUSINESS_LINE, 
    NULL AS FTP, CAST(SUM(a.ALLOC_FTP_POS) AS decimal(30, 10)) AS FTP_RESULT, a.IND_POOL, 
    NULL AS COD_SEGMENT, NULL AS DES_SEGMENT, NULL AS EXP_TYPE, NULL AS EXP_FAMILY,
    a.DATA_DATE, 'RCIN' AS COD_CONT
FROM MIS_TMP_INTER_ALLOC a
GROUP BY a.COD_ACCO_CENT, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.COD_ENTITY, 
    a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE_DESTINY, a.DES_BUSINESS_LINE_DESTINY, a.IND_POOL, a.DATA_DATE;

------------ Inserción de reparto negativo a la línea de negocio origen ------------
INSERT INTO MIS_DWH_RECONCILIATION PARTITION (DATA_DATE, COD_CONT)
SELECT a.COD_ACCO_CENT, NULL AS COD_OFFI, NULL AS COD_NAR, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.COD_ENTITY, 
    0 AS EOPBAL_CAP, 0 AS EOPBAL_INT, 0 AS AVGBAL_CAP, 0 AS AVGBAL_INT, CAST(SUM(a.ALLOC_PL_NEG) AS decimal(30, 10))  AS PL, 
    'RECL' AS COD_INFO_SOURCE, 'N/A' AS COD_GL_GROUP, 'N/A' AS DES_GL_GROUP, 'N/A' AS ACCOUNT_CONCEPT, 
    a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE_ORIGIN AS COD_BUSINESS_LINE, a.DES_BUSINESS_LINE_ORIGIN AS DES_BUSINESS_LINE, 
    NULL AS FTP, CAST(SUM(a.ALLOC_FTP_NEG) AS decimal(30, 10)) AS FTP_RESULT, a.IND_POOL, 
    NULL AS COD_SEGMENT, NULL AS DES_SEGMENT, NULL AS EXP_TYPE, NULL AS EXP_FAMILY,
    a.DATA_DATE, 'RCIN' AS COD_CONT
FROM MIS_TMP_INTER_ALLOC a
GROUP BY a.COD_ACCO_CENT, a.COD_BLCE_STATUS, a.COD_CURRENCY, a.COD_ENTITY, 
    a.COD_PL_ACC, a.DES_PL_ACC, a.COD_BLCE_PROD, a.DES_BLCE_PROD, 
    a.COD_BUSINESS_LINE_ORIGIN, a.DES_BUSINESS_LINE_ORIGIN, a.IND_POOL, a.DATA_DATE;

------------ Eliminación de tablas temporales ------------
TRUNCATE TABLE IF EXISTS MIS_TMP_PAR_INTER;
DROP TABLE IF EXISTS MIS_TMP_PAR_INTER;
TRUNCATE TABLE IF EXISTS MIS_TMP_INTER_PL;
DROP TABLE IF EXISTS MIS_TMP_INTER_PL;
TRUNCATE TABLE IF EXISTS MIS_TMP_INTER_ALLOC;
DROP TABLE IF EXISTS MIS_TMP_INTER_ALLOC;


----------------- Validación de las tablas paramétricas del motor -----------------

----Tabla temporal de validaciones a realizar
DROP TABLE IF EXISTS MIS_TMP_INTER_DES_VALIDATION;
CREATE TABLE MIS_TMP_INTER_DES_VALIDATION (
COD_VALIDATION STRING, DES_VALIDATION STRING); 

----Tabla temporal para almacenar resultados
DROP TABLE IF EXISTS MIS_TMP_INTER_VALIDATION;
CREATE TABLE MIS_TMP_INTER_VALIDATION (
COD_ENTITY STRING, COD_BLCE_PROD STRING, COD_PL_ACC STRING, COD_BUSINESS_LINE_ORIGIN STRING, COD_VALIDATION STRING);

----Descripción de validaciones a realizar
INSERT INTO MIS_TMP_INTER_DES_VALIDATION VALUES ('001', 'El porcentaje total repartido no es igual a 1 (100%)');
INSERT INTO MIS_TMP_INTER_DES_VALIDATION VALUES ('002', 'Hay porcentajes de repartición fuera del rango definido (0 a 1)');
INSERT INTO MIS_TMP_INTER_DES_VALIDATION VALUES ('003', 'Hay Líneas de Negocio Destino sin parametrizar en las tablas MIS_PAR_REL_BL');

----Validación de porcentaje total a repartir por Línea de Negocio
INSERT INTO MIS_TMP_INTER_VALIDATION
SELECT a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN, '001' AS COD_VALIDATION
FROM MIS_PAR_INTER_ENG a
GROUP BY a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN
HAVING SUM(a.ALLOCATION_PERC)  <> 1;

----Validación de porcentajes a repartir por Línea de Negocio para descartar porcentaje negativos o mayores a 1
INSERT INTO MIS_TMP_INTER_VALIDATION
SELECT a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN, '002' AS COD_VALIDATION
FROM MIS_PAR_INTER_ENG a
GROUP BY a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN
HAVING SUM(IF(a.ALLOCATION_PERC BETWEEN 0 AND 1, 0, 1)) <> 0;

----Verificación de Linea de Negocio del Motor de Repartos de Gastos 
INSERT INTO MIS_TMP_INTER_VALIDATION
SELECT a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN, '003' AS COD_VALIDATION
FROM MIS_PAR_INTER_ENG a
LEFT JOIN (
    SELECT DISTINCT A.COD_BUSINESS_LINE 
    FROM MIS_PAR_REL_BL_OPER A 
    UNION
    SELECT DISTINCT A.COD_BUSINESS_LINE 
    FROM MIS_PAR_REL_BL_ACC A) b
ON a.COD_BUSINESS_LINE_DESTINY = b.COD_BUSINESS_LINE 
WHERE TRIM(a.COD_BUSINESS_LINE_DESTINY) <> '' AND b.COD_BUSINESS_LINE IS NULL
GROUP BY a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN;

----Llenado de tabla final de validaciones del motor
TRUNCATE TABLE IF EXISTS MIS_VAL_INTERBUSINESS;
INSERT INTO MIS_VAL_INTERBUSINESS
SELECT '${var:periodo}' AS DATA_DATE, a.COD_ENTITY, a.COD_BLCE_PROD, a.COD_PL_ACC, a.COD_BUSINESS_LINE_ORIGIN, b.DES_VALIDATION
FROM MIS_TMP_INTER_VALIDATION a
LEFT JOIN MIS_TMP_INTER_DES_VALIDATION b
ON a.COD_VALIDATION = b.COD_VALIDATION;

----Eliminación de tablas temporales
TRUNCATE TABLE IF EXISTS MIS_TMP_INTER_DES_VALIDATION;
DROP TABLE IF EXISTS MIS_TMP_INTER_DES_VALIDATION;
TRUNCATE TABLE IF EXISTS MIS_TMP_INTER_VALIDATION;
DROP TABLE IF EXISTS MIS_TMP_INTER_VALIDATION;