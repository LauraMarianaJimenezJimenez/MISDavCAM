----------------------------------------------------------- MOTOR DE REPARTOS DE GASTOS ---------------------------------------------------

USE ${var:base_datos};
SET DECIMAL_V2=FALSE;

--- Ajuste de porcentaje para totalizar drivers de Centro de Costo a 100% ---
DROP TABLE IF EXISTS MIS_TMP_PAR_AC_DRI;
CREATE TABLE MIS_TMP_PAR_AC_DRI AS 
SELECT a.COD_DRIVER, a.COD_ACCO_CENT, a.COD_EXPENSE, CAST(a.ALLOCATION_PERC/TMP.TOT_PERC AS decimal(30, 10)) AS ALLOCATION_PERC 
FROM MIS_PAR_ALLOC_AC_DRI a
LEFT JOIN (SELECT TMP.COD_DRIVER, SUM(TMP.ALLOCATION_PERC) AS TOT_PERC FROM MIS_PAR_ALLOC_AC_DRI TMP GROUP BY TMP.COD_DRIVER) TMP
ON a.COD_DRIVER = TMP.COD_DRIVER;

--- Ajuste de porcentaje para totalizar drivers de Segmento-Producto a 100% ---
DROP TABLE IF EXISTS MIS_TMP_PAR_SEG_DRI;
CREATE TABLE MIS_TMP_PAR_SEG_DRI AS 
SELECT a.COD_DRIVER, a.COD_SEGMENT, a.COD_BLCE_PROD, CAST(a.ALLOCATION_PERC/TMP.TOT_PERC AS decimal(30, 10)) AS ALLOCATION_PERC  
FROM MIS_PAR_ALLOC_SEG_DRI a
LEFT JOIN (SELECT TMP.COD_DRIVER, SUM(TMP.ALLOCATION_PERC) AS TOT_PERC FROM MIS_PAR_ALLOC_SEG_DRI TMP GROUP BY TMP.COD_DRIVER) TMP
ON a.COD_DRIVER = TMP.COD_DRIVER;

------------ Creación de la tabla Repartos por Centro de Costo ------------
DROP TABLE IF EXISTS MIS_TMP_PAR_ALLOC_AC;
CREATE TABLE MIS_TMP_PAR_ALLOC_AC AS
SELECT DISTINCT 
    a.*, b.COD_ACCO_CENT AS COD_ACCO_CENT_DESTINY, b.COD_EXPENSE AS COD_EXPENSE_DESTINY, b.ALLOCATION_PERC
FROM MIS_PAR_ALLOC_AC_ENG a
LEFT JOIN MIS_TMP_PAR_AC_DRI b
ON a.COD_DRIVER = b.COD_DRIVER;

------------ Creación de la tabla Repartos por Segmento-Producto con Descripciones ------------
DROP TABLE IF EXISTS MIS_TMP_PAR_ALLOC_SEG;
CREATE TABLE MIS_TMP_PAR_ALLOC_SEG AS
SELECT DISTINCT 
    a.*, b.COD_SEGMENT AS COD_SEGMENT_DESTINY, b.COD_BLCE_PROD AS COD_BLCE_PROD_DESTINY, b.ALLOCATION_PERC, 
    b.COD_SEGMENT AS DES_SEGMENT_DESTINY, --TODO: PREGUNTAR
    d.DES_BLCE_PROD AS DES_BLCE_PROD_DESTINY
FROM MIS_PAR_ALLOC_SEG_ENG a
LEFT JOIN MIS_TMP_PAR_SEG_DRI b 
ON a.COD_DRIVER = b.COD_DRIVER 
LEFT JOIN MIS_PAR_CAT_BP d 
ON b.COD_BLCE_PROD = d.COD_BLCE_PROD;


------------ Suma de valor de contratos y cálculo de repartos por Línea de Negocio ------------

----Agrupación de cuentas a repartir
DROP TABLE IF EXISTS MIS_TMP_ALLOC_STG_INI;
CREATE TABLE MIS_TMP_ALLOC_STG_INI AS 
SELECT DWH.DATA_DATE, DWH.COD_ACCO_CENT, DWH.COD_EXPENSE, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, CAST(SUM(DWH.PL) AS decimal(30, 10)) AS PL, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE,
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY 
FROM MIS_DWH_EXPENSES_M DWH
WHERE DWH.DATA_DATE='${var:periodo}' AND IFNULL(DWH.PL, 0)<>0 
GROUP BY DWH.DATA_DATE, DWH.COD_ACCO_CENT, DWH.COD_EXPENSE, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE,
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY 
UNION ALL 
SELECT DWH.DATA_DATE, DWH.COD_ACCO_CENT, NULL AS COD_EXPENSE, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, CAST(SUM(DWH.PL) AS decimal(30, 10)) AS PL, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE,
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY 
FROM MIS_DWH_RECONCILIATION_M DWH
WHERE DWH.DATA_DATE='${var:periodo}' AND IFNULL(DWH.PL, 0)<>0 AND DWH.COD_CONT IN ('RCTB', 'CTBP', 'RCCL')
GROUP BY DWH.DATA_DATE, DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE,
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY 
;


----------------- Limpieza de centros de costo (Reparto por centros de costo) -----------------

----Cálculo para limpieza de centros de costo (Reparto por centros de costo)
DROP TABLE IF EXISTS MIS_TMP_ALLOC_1; 
CREATE TABLE MIS_TMP_ALLOC_1 AS 
SELECT DWH.DATA_DATE,
    CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.COD_ACCO_CENT_DESTINY
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.COD_ACCO_CENT_DESTINY
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.COD_ACCO_CENT_DESTINY
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.COD_ACCO_CENT_DESTINY
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.COD_ACCO_CENT_DESTINY
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.COD_ACCO_CENT_DESTINY
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.COD_ACCO_CENT_DESTINY
        ELSE DWH.COD_ACCO_CENT
    END AS COD_ACCO_CENT,
    DWH.COD_ACCO_CENT AS COD_ACCO_CENT_ORIGIN, 
    CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.COD_EXPENSE_DESTINY
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.COD_EXPENSE_DESTINY
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.COD_EXPENSE_DESTINY
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.COD_EXPENSE_DESTINY
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.COD_EXPENSE_DESTINY
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.COD_EXPENSE_DESTINY
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.COD_EXPENSE_DESTINY
        ELSE DWH.COD_EXPENSE
    END AS COD_EXPENSE,
    DWH.COD_EXPENSE AS COD_EXPENSE_ORIGIN, 
    DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    CAST(CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.ALLOCATION_PERC
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.ALLOCATION_PERC
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.ALLOCATION_PERC
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.ALLOCATION_PERC
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.ALLOCATION_PERC
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.ALLOCATION_PERC
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.ALLOCATION_PERC
        ELSE 1
    END * DWH.PL AS DECIMAL(30,10)) AS PL,
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY, 
    IF(COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, 
                AL5.COD_DRIVER, AL6.COD_DRIVER, AL7.COD_DRIVER) IS NOT NULL, 'Y', 'N') AS AC_ALLOC, --Indicador de reparto
    COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, 
                AL5.COD_DRIVER, AL6.COD_DRIVER, AL7.COD_DRIVER) AS COD_DRIVER
FROM MIS_TMP_ALLOC_STG_INI DWH
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL1 
ON DWH.COD_ENTITY=AL1.COD_ENTITY AND DWH.COD_CURRENCY=AL1.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL1.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL1.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL1.COD_GL_GROUP 
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL2 
ON COALESCE(AL1.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL2.COD_ENTITY AND DWH.COD_CURRENCY=AL2.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL2.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL2.COD_ACCO_CENT AND TRIM(AL2.COD_GL_GROUP) = '' 
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL3 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL3.COD_ENTITY AND DWH.COD_CURRENCY=AL3.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL3.COD_EXPENSE AND TRIM(AL3.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL3.COD_GL_GROUP    
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL4 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL4.COD_ENTITY AND DWH.COD_CURRENCY=AL4.COD_CURRENCY 
   AND TRIM(AL4.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL4.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL4.COD_GL_GROUP 
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL5 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER) IS NULL
   AND DWH.COD_ENTITY=AL5.COD_ENTITY AND DWH.COD_CURRENCY=AL5.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL5.COD_EXPENSE AND TRIM(AL5.COD_ACCO_CENT) = '' AND TRIM(AL5.COD_GL_GROUP) = '' 
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL6 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, AL5.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL6.COD_ENTITY AND DWH.COD_CURRENCY=AL6.COD_CURRENCY 
   AND TRIM(AL6.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL6.COD_ACCO_CENT AND TRIM(AL6.COD_GL_GROUP) = '' 
LEFT JOIN MIS_TMP_PAR_ALLOC_AC AL7 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, AL5.COD_DRIVER, AL6.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL7.COD_ENTITY AND DWH.COD_CURRENCY=AL7.COD_CURRENCY 
   AND TRIM(AL7.COD_EXPENSE) = '' AND TRIM(AL7.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL7.COD_GL_GROUP 
;

------------ Limpieza de partición ------------
ALTER TABLE MIS_DWH_EXPENSES_M
DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_CONT = 'RCLI');

----Inserción de registros que fueron repartidos o centros de costo que fuerom limpiados
INSERT INTO MIS_DWH_EXPENSES_M
    (COD_ACCO_CENT, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_INFO_SOURCE, 
    COD_GL_GROUP, DES_GL_GROUP, ACCOUNT_CONCEPT, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, 
    COD_SEGMENT, DES_SEGMENT, EXP_TYPE, EXP_FAMILY, COD_EXPENSE, COD_DRIVER, COD_ACCO_CENT_ORIGIN, COD_EXPENSE_ORIGIN) 
PARTITION (DATA_DATE, COD_CONT)
SELECT DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    CAST(SUM(DWH.PL) AS decimal(30, 10)) AS PL, 'RCLI' AS COD_INFO_SOURCE, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, 
    CASE 
        WHEN AL1.EXP_TYPE IS NOT NULL THEN AL1.EXP_TYPE
        WHEN AL2.EXP_TYPE IS NOT NULL THEN AL2.EXP_TYPE
        WHEN AL3.EXP_TYPE IS NOT NULL THEN AL3.EXP_TYPE
        WHEN AL4.EXP_TYPE IS NOT NULL THEN AL4.EXP_TYPE
        WHEN AL5.EXP_TYPE IS NOT NULL THEN AL5.EXP_TYPE
        WHEN AL6.EXP_TYPE IS NOT NULL THEN AL6.EXP_TYPE
        WHEN AL7.EXP_TYPE IS NOT NULL THEN AL7.EXP_TYPE
    END AS EXP_TYPE, 
    CASE 
        WHEN AL1.EXP_FAMILY IS NOT NULL THEN AL1.EXP_FAMILY
        WHEN AL2.EXP_FAMILY IS NOT NULL THEN AL2.EXP_FAMILY
        WHEN AL3.EXP_FAMILY IS NOT NULL THEN AL3.EXP_FAMILY
        WHEN AL4.EXP_FAMILY IS NOT NULL THEN AL4.EXP_FAMILY
        WHEN AL5.EXP_FAMILY IS NOT NULL THEN AL5.EXP_FAMILY
        WHEN AL6.EXP_FAMILY IS NOT NULL THEN AL6.EXP_FAMILY
        WHEN AL7.EXP_FAMILY IS NOT NULL THEN AL7.EXP_FAMILY
    END AS EXP_FAMILY, 
    DWH.COD_EXPENSE, DWH.COD_DRIVER, DWH.COD_ACCO_CENT_ORIGIN,
    DWH.COD_EXPENSE_ORIGIN, DWH.DATA_DATE, 'RCLI' AS COD_CONT 
FROM MIS_TMP_ALLOC_1 DWH
LEFT JOIN MIS_PAR_REL_EXP_TYP AL1 
ON DWH.COD_EXPENSE=AL1.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL1.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL1.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL2 
ON COALESCE(AL1.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL2.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL2.COD_ACCO_CENT AND TRIM(AL2.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL3 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL3.COD_EXPENSE AND TRIM(AL3.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL3.COD_GL_GROUP    
LEFT JOIN MIS_PAR_REL_EXP_TYP AL4 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY) IS NULL 
   AND TRIM(AL4.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL4.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL4.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL5 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY) IS NULL
   AND DWH.COD_EXPENSE=AL5.COD_EXPENSE AND TRIM(AL5.COD_ACCO_CENT) = '' AND TRIM(AL5.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL6 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY) IS NULL 
   AND TRIM(AL6.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL6.COD_ACCO_CENT AND TRIM(AL6.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL7 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY) IS NULL 
   AND TRIM(AL7.COD_EXPENSE) = '' AND TRIM(AL7.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL7.COD_GL_GROUP
WHERE DWH.AC_ALLOC = 'Y'
GROUP BY DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY,  
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY, DWH.COD_EXPENSE, DWH.COD_DRIVER, DWH.COD_ACCO_CENT_ORIGIN, 
    DWH.COD_EXPENSE_ORIGIN, DWH.DATA_DATE, AL1.EXP_TYPE, AL2.EXP_TYPE, AL3.EXP_TYPE, AL4.EXP_TYPE, AL5.EXP_TYPE, AL6.EXP_TYPE,
    AL7.EXP_TYPE, AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY, AL7.EXP_FAMILY;

----Inserción de contrapartida de registros que fueron repartidos o centros de costo que fuerom limpiados
INSERT INTO MIS_DWH_EXPENSES_M
    (COD_ACCO_CENT, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_INFO_SOURCE, 
    COD_GL_GROUP, DES_GL_GROUP, ACCOUNT_CONCEPT, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, 
    COD_SEGMENT, DES_SEGMENT, EXP_TYPE, EXP_FAMILY, COD_EXPENSE, COD_DRIVER, COD_ACCO_CENT_ORIGIN, COD_EXPENSE_ORIGIN) 
PARTITION (DATA_DATE, COD_CONT)
SELECT DWH.COD_ACCO_CENT_ORIGIN, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    CAST(SUM(DWH.PL * -1) AS decimal(30, 10)) AS PL, 'RCLI' AS COD_INFO_SOURCE, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, 
    CASE 
        WHEN AL1.EXP_TYPE IS NOT NULL THEN AL1.EXP_TYPE
        WHEN AL2.EXP_TYPE IS NOT NULL THEN AL2.EXP_TYPE
        WHEN AL3.EXP_TYPE IS NOT NULL THEN AL3.EXP_TYPE
        WHEN AL4.EXP_TYPE IS NOT NULL THEN AL4.EXP_TYPE
        WHEN AL5.EXP_TYPE IS NOT NULL THEN AL5.EXP_TYPE
        WHEN AL6.EXP_TYPE IS NOT NULL THEN AL6.EXP_TYPE
        WHEN AL7.EXP_TYPE IS NOT NULL THEN AL7.EXP_TYPE
    END AS EXP_TYPE, 
    CASE 
        WHEN AL1.EXP_FAMILY IS NOT NULL THEN AL1.EXP_FAMILY
        WHEN AL2.EXP_FAMILY IS NOT NULL THEN AL2.EXP_FAMILY
        WHEN AL3.EXP_FAMILY IS NOT NULL THEN AL3.EXP_FAMILY
        WHEN AL4.EXP_FAMILY IS NOT NULL THEN AL4.EXP_FAMILY
        WHEN AL5.EXP_FAMILY IS NOT NULL THEN AL5.EXP_FAMILY
        WHEN AL6.EXP_FAMILY IS NOT NULL THEN AL6.EXP_FAMILY
        WHEN AL7.EXP_FAMILY IS NOT NULL THEN AL7.EXP_FAMILY
    END AS EXP_FAMILY,
    DWH.COD_EXPENSE_ORIGIN, DWH.COD_DRIVER, DWH.COD_ACCO_CENT_ORIGIN,
    DWH.COD_EXPENSE_ORIGIN, DWH.DATA_DATE, 'RCCL' AS COD_CONT 
FROM MIS_TMP_ALLOC_1 DWH 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL1 
ON DWH.COD_EXPENSE=AL1.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL1.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL1.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL2 
ON COALESCE(AL1.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL2.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL2.COD_ACCO_CENT AND TRIM(AL2.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL3 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL3.COD_EXPENSE AND TRIM(AL3.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL3.COD_GL_GROUP    
LEFT JOIN MIS_PAR_REL_EXP_TYP AL4 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY) IS NULL 
   AND TRIM(AL4.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL4.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL4.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL5 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY) IS NULL
   AND DWH.COD_EXPENSE=AL5.COD_EXPENSE AND TRIM(AL5.COD_ACCO_CENT) = '' AND TRIM(AL5.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL6 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY) IS NULL 
   AND TRIM(AL6.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL6.COD_ACCO_CENT AND TRIM(AL6.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL7 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY) IS NULL 
   AND TRIM(AL7.COD_EXPENSE) = '' AND TRIM(AL7.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL7.COD_GL_GROUP
WHERE DWH.AC_ALLOC = 'Y'
GROUP BY DWH.COD_ACCO_CENT_ORIGIN, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY,  
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY, DWH.COD_EXPENSE_ORIGIN, DWH.COD_DRIVER, DWH.COD_ACCO_CENT_ORIGIN, 
    DWH.COD_EXPENSE_ORIGIN, DWH.DATA_DATE, AL1.EXP_TYPE, AL2.EXP_TYPE, AL3.EXP_TYPE, AL4.EXP_TYPE, AL5.EXP_TYPE, AL6.EXP_TYPE,
    AL7.EXP_TYPE, AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY, AL7.EXP_FAMILY;


----------------- Reparto por segmento y producto balance -----------------

----Cálculo del Reparto por segmento y producto balance
DROP TABLE IF EXISTS MIS_TMP_ALLOC_2; 
CREATE TABLE MIS_TMP_ALLOC_2 AS 
SELECT DWH.DATA_DATE, DWH.COD_ACCO_CENT, DWH.COD_EXPENSE, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    CAST(ROUND(CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.ALLOCATION_PERC
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.ALLOCATION_PERC
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.ALLOCATION_PERC
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.ALLOCATION_PERC
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.ALLOCATION_PERC
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.ALLOCATION_PERC
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.ALLOCATION_PERC
        ELSE 1
    END * DWH.PL,10) AS DECIMAL(30,10)) AS PL,
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.COD_SEGMENT_DESTINY
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.COD_SEGMENT_DESTINY
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.COD_SEGMENT_DESTINY
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.COD_SEGMENT_DESTINY
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.COD_SEGMENT_DESTINY
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.COD_SEGMENT_DESTINY
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.COD_SEGMENT_DESTINY
        ELSE DWH.COD_SEGMENT
    END AS COD_SEGMENT,
    DWH.COD_SEGMENT AS COD_SEGMENT_ORIGIN,
    CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.DES_SEGMENT_DESTINY
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.DES_SEGMENT_DESTINY
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.DES_SEGMENT_DESTINY
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.DES_SEGMENT_DESTINY
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.DES_SEGMENT_DESTINY
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.DES_SEGMENT_DESTINY
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.DES_SEGMENT_DESTINY
        ELSE DWH.DES_SEGMENT
    END AS DES_SEGMENT,
    DWH.DES_SEGMENT AS DES_SEGMENT_ORIGIN, 
    CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.COD_BLCE_PROD_DESTINY
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.COD_BLCE_PROD_DESTINY
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.COD_BLCE_PROD_DESTINY
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.COD_BLCE_PROD_DESTINY
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.COD_BLCE_PROD_DESTINY
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.COD_BLCE_PROD_DESTINY
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.COD_BLCE_PROD_DESTINY
        ELSE DWH.COD_BLCE_PROD
    END AS COD_BLCE_PROD,
    DWH.COD_BLCE_PROD AS COD_BLCE_PROD_ORIGIN,
    CASE 
	    WHEN AL1.COD_DRIVER IS NOT NULL THEN AL1.DES_BLCE_PROD_DESTINY
	    WHEN AL2.COD_DRIVER IS NOT NULL THEN AL2.DES_BLCE_PROD_DESTINY
	    WHEN AL3.COD_DRIVER IS NOT NULL THEN AL3.DES_BLCE_PROD_DESTINY
	    WHEN AL4.COD_DRIVER IS NOT NULL THEN AL4.DES_BLCE_PROD_DESTINY
	    WHEN AL5.COD_DRIVER IS NOT NULL THEN AL5.DES_BLCE_PROD_DESTINY
	    WHEN AL6.COD_DRIVER IS NOT NULL THEN AL6.DES_BLCE_PROD_DESTINY
	    WHEN AL7.COD_DRIVER IS NOT NULL THEN AL7.DES_BLCE_PROD_DESTINY
        ELSE DWH.DES_BLCE_PROD
    END AS DES_BLCE_PROD,
    DWH.DES_BLCE_PROD AS DES_BLCE_PROD_ORIGIN,  
    DWH.EXP_TYPE, DWH.EXP_FAMILY, 
    IF(COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, 
                AL5.COD_DRIVER, AL6.COD_DRIVER, AL7.COD_DRIVER) IS NOT NULL, 'Y', 'N') AS SEG_ALLOC, --Indicador de reparto
    COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, 
                AL5.COD_DRIVER, AL6.COD_DRIVER, AL7.COD_DRIVER) AS COD_DRIVER
FROM MIS_TMP_ALLOC_1 DWH
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL1 
ON DWH.COD_ENTITY=AL1.COD_ENTITY AND DWH.COD_CURRENCY=AL1.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL1.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL1.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL1.COD_GL_GROUP 
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL2 
ON COALESCE(AL1.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL2.COD_ENTITY AND DWH.COD_CURRENCY=AL2.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL2.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL2.COD_ACCO_CENT AND TRIM(AL2.COD_GL_GROUP) = '' 
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL3 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL3.COD_ENTITY AND DWH.COD_CURRENCY=AL3.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL3.COD_EXPENSE AND TRIM(AL3.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL3.COD_GL_GROUP    
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL4 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL4.COD_ENTITY AND DWH.COD_CURRENCY=AL4.COD_CURRENCY 
   AND TRIM(AL4.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL4.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL4.COD_GL_GROUP 
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL5 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER) IS NULL
   AND DWH.COD_ENTITY=AL5.COD_ENTITY AND DWH.COD_CURRENCY=AL5.COD_CURRENCY 
   AND DWH.COD_EXPENSE=AL5.COD_EXPENSE AND TRIM(AL5.COD_ACCO_CENT) = '' AND TRIM(AL5.COD_GL_GROUP) = '' 
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL6 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, AL5.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL6.COD_ENTITY AND DWH.COD_CURRENCY=AL6.COD_CURRENCY 
   AND TRIM(AL6.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL6.COD_ACCO_CENT AND TRIM(AL6.COD_GL_GROUP) = '' 
LEFT JOIN MIS_TMP_PAR_ALLOC_SEG AL7 
ON COALESCE(AL1.COD_DRIVER, AL2.COD_DRIVER, AL3.COD_DRIVER, AL4.COD_DRIVER, AL5.COD_DRIVER, AL6.COD_DRIVER) IS NULL 
   AND DWH.COD_ENTITY=AL7.COD_ENTITY AND DWH.COD_CURRENCY=AL7.COD_CURRENCY 
   AND TRIM(AL7.COD_EXPENSE) = '' AND TRIM(AL7.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL7.COD_GL_GROUP 
;


------------ Limpieza de partición ------------
ALTER TABLE MIS_DWH_EXPENSES_M
DROP IF EXISTS PARTITION (DATA_DATE = '${var:periodo}', COD_CONT = 'RCRP');

----Inserción de registros repartidos por segmento y producto balance
INSERT INTO MIS_DWH_EXPENSES_M 
    (COD_ACCO_CENT, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_INFO_SOURCE, 
    COD_GL_GROUP, DES_GL_GROUP, ACCOUNT_CONCEPT, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, 
    COD_SEGMENT, DES_SEGMENT, EXP_TYPE, EXP_FAMILY, COD_EXPENSE, COD_DRIVER, COD_ACCO_CENT_ORIGIN, COD_EXPENSE_ORIGIN) 
PARTITION (DATA_DATE, COD_CONT)
SELECT DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    CAST(SUM(DWH.PL) AS decimal(30, 10)) AS PL, 'RCRP' AS COD_INFO_SOURCE, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, ISNULL(HIE.COD_BUSINESS_LINE,HIE2.COD_BUSINESS_LINE) AS COD_BUSINESS_LINE, 
    CAT.DES_BUSINESS_LINE, DWH.COD_SEGMENT, DWH.DES_SEGMENT, 
    CASE 
        WHEN AL1.EXP_TYPE IS NOT NULL THEN AL1.EXP_TYPE
        WHEN AL2.EXP_TYPE IS NOT NULL THEN AL2.EXP_TYPE
        WHEN AL3.EXP_TYPE IS NOT NULL THEN AL3.EXP_TYPE
        WHEN AL4.EXP_TYPE IS NOT NULL THEN AL4.EXP_TYPE
        WHEN AL5.EXP_TYPE IS NOT NULL THEN AL5.EXP_TYPE
        WHEN AL6.EXP_TYPE IS NOT NULL THEN AL6.EXP_TYPE
        WHEN AL7.EXP_TYPE IS NOT NULL THEN AL7.EXP_TYPE
    END AS EXP_TYPE, 
    CASE 
        WHEN AL1.EXP_FAMILY IS NOT NULL THEN AL1.EXP_FAMILY
        WHEN AL2.EXP_FAMILY IS NOT NULL THEN AL2.EXP_FAMILY
        WHEN AL3.EXP_FAMILY IS NOT NULL THEN AL3.EXP_FAMILY
        WHEN AL4.EXP_FAMILY IS NOT NULL THEN AL4.EXP_FAMILY
        WHEN AL5.EXP_FAMILY IS NOT NULL THEN AL5.EXP_FAMILY
        WHEN AL6.EXP_FAMILY IS NOT NULL THEN AL6.EXP_FAMILY
        WHEN AL7.EXP_FAMILY IS NOT NULL THEN AL7.EXP_FAMILY
    END AS EXP_FAMILY, 
    DWH.COD_EXPENSE, DWH.COD_DRIVER,
    DWH.COD_ACCO_CENT AS COD_ACCO_CENT_ORIGIN, DWH.COD_EXPENSE AS COD_EXPENSE_ORIGIN,
    DWH.DATA_DATE, 'RCRP' AS COD_CONT 
FROM MIS_TMP_ALLOC_2 DWH
LEFT JOIN MIS_HIERARCHY_BL HIE
ON TRIM(DWH.COD_SEGMENT) = TRIM(HIE.COD_SEGMENT) AND TRIM(DWH.COD_BLCE_PROD) = TRIM(HIE.COD_BLCE_PROD)
LEFT JOIN MIS_HIERARCHY_BL HIE2
ON TRIM(DWH.COD_SEGMENT) = TRIM(HIE2.COD_SEGMENT) AND TRIM(HIE2.COD_BLCE_PROD) = ''
LEFT JOIN MIS_PAR_CAT_BL CAT
ON ISNULL(TRIM(HIE.COD_BUSINESS_LINE),TRIM(HIE2.COD_BUSINESS_LINE)) = TRIM(CAT.COD_BUSINESS_LINE)
LEFT JOIN MIS_PAR_REL_EXP_TYP AL1 
ON DWH.COD_EXPENSE=AL1.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL1.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL1.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL2 
ON COALESCE(AL1.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL2.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL2.COD_ACCO_CENT AND TRIM(AL2.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL3 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL3.COD_EXPENSE AND TRIM(AL3.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL3.COD_GL_GROUP    
LEFT JOIN MIS_PAR_REL_EXP_TYP AL4 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY) IS NULL 
   AND TRIM(AL4.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL4.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL4.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL5 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY) IS NULL
   AND DWH.COD_EXPENSE=AL5.COD_EXPENSE AND TRIM(AL5.COD_ACCO_CENT) = '' AND TRIM(AL5.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL6 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY) IS NULL 
   AND TRIM(AL6.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL6.COD_ACCO_CENT AND TRIM(AL6.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL7 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY) IS NULL 
   AND TRIM(AL7.COD_EXPENSE) = '' AND TRIM(AL7.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL7.COD_GL_GROUP
WHERE DWH.SEG_ALLOC = 'Y'
GROUP BY DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY,  
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD, DWH.DES_BLCE_PROD, HIE.COD_BUSINESS_LINE, HIE2.COD_BUSINESS_LINE, CAT.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT, DWH.DES_SEGMENT, DWH.EXP_TYPE, DWH.EXP_FAMILY, DWH.COD_EXPENSE, DWH.COD_DRIVER, DWH.DATA_DATE, 
    AL1.EXP_TYPE, AL2.EXP_TYPE, AL3.EXP_TYPE, AL4.EXP_TYPE, AL5.EXP_TYPE, AL6.EXP_TYPE, AL7.EXP_TYPE, AL1.EXP_FAMILY, 
    AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY, AL7.EXP_FAMILY;

----Inserción de contrapartida de registros repartidos por segmento y producto balance
INSERT INTO MIS_DWH_EXPENSES_M
    (COD_ACCO_CENT, COD_BLCE_STATUS, COD_CURRENCY, COD_ENTITY, PL, COD_INFO_SOURCE, 
    COD_GL_GROUP, DES_GL_GROUP, ACCOUNT_CONCEPT, COD_PL_ACC, DES_PL_ACC, 
    COD_BLCE_PROD, DES_BLCE_PROD, COD_BUSINESS_LINE, DES_BUSINESS_LINE, 
    COD_SEGMENT, DES_SEGMENT, EXP_TYPE, EXP_FAMILY, COD_EXPENSE, COD_DRIVER, COD_ACCO_CENT_ORIGIN, COD_EXPENSE_ORIGIN) 
PARTITION (DATA_DATE, COD_CONT)
SELECT DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY, 
    CAST(SUM(DWH.PL * -1) AS decimal(30, 10)) AS PL, 'RCRP' AS COD_INFO_SOURCE, 
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD_ORIGIN, DWH.DES_BLCE_PROD_ORIGIN, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT_ORIGIN, DWH.DES_SEGMENT_ORIGIN, 
    CASE 
        WHEN AL1.EXP_TYPE IS NOT NULL THEN AL1.EXP_TYPE
        WHEN AL2.EXP_TYPE IS NOT NULL THEN AL2.EXP_TYPE
        WHEN AL3.EXP_TYPE IS NOT NULL THEN AL3.EXP_TYPE
        WHEN AL4.EXP_TYPE IS NOT NULL THEN AL4.EXP_TYPE
        WHEN AL5.EXP_TYPE IS NOT NULL THEN AL5.EXP_TYPE
        WHEN AL6.EXP_TYPE IS NOT NULL THEN AL6.EXP_TYPE
        WHEN AL7.EXP_TYPE IS NOT NULL THEN AL7.EXP_TYPE
    END AS EXP_TYPE, 
    CASE 
        WHEN AL1.EXP_FAMILY IS NOT NULL THEN AL1.EXP_FAMILY
        WHEN AL2.EXP_FAMILY IS NOT NULL THEN AL2.EXP_FAMILY
        WHEN AL3.EXP_FAMILY IS NOT NULL THEN AL3.EXP_FAMILY
        WHEN AL4.EXP_FAMILY IS NOT NULL THEN AL4.EXP_FAMILY
        WHEN AL5.EXP_FAMILY IS NOT NULL THEN AL5.EXP_FAMILY
        WHEN AL6.EXP_FAMILY IS NOT NULL THEN AL6.EXP_FAMILY
        WHEN AL7.EXP_FAMILY IS NOT NULL THEN AL7.EXP_FAMILY
    END AS EXP_FAMILY, 
    DWH.COD_EXPENSE, DWH.COD_DRIVER,
    DWH.COD_ACCO_CENT AS COD_ACCO_CENT_ORIGIN, DWH.COD_EXPENSE AS COD_EXPENSE_ORIGIN,
    DWH.DATA_DATE, 'RCCL' AS COD_CONT 
FROM MIS_TMP_ALLOC_2 DWH 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL1 
ON DWH.COD_EXPENSE=AL1.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL1.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL1.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL2 
ON COALESCE(AL1.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL2.COD_EXPENSE AND DWH.COD_ACCO_CENT=AL2.COD_ACCO_CENT AND TRIM(AL2.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL3 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY) IS NULL 
   AND DWH.COD_EXPENSE=AL3.COD_EXPENSE AND TRIM(AL3.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL3.COD_GL_GROUP    
LEFT JOIN MIS_PAR_REL_EXP_TYP AL4 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY) IS NULL 
   AND TRIM(AL4.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL4.COD_ACCO_CENT AND DWH.COD_GL_GROUP=AL4.COD_GL_GROUP 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL5 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY) IS NULL
   AND DWH.COD_EXPENSE=AL5.COD_EXPENSE AND TRIM(AL5.COD_ACCO_CENT) = '' AND TRIM(AL5.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL6 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY) IS NULL 
   AND TRIM(AL6.COD_EXPENSE) = '' AND DWH.COD_ACCO_CENT=AL6.COD_ACCO_CENT AND TRIM(AL6.COD_GL_GROUP) = '' 
LEFT JOIN MIS_PAR_REL_EXP_TYP AL7 
ON COALESCE(AL1.EXP_FAMILY, AL2.EXP_FAMILY, AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY) IS NULL 
   AND TRIM(AL7.COD_EXPENSE) = '' AND TRIM(AL7.COD_ACCO_CENT) = '' AND DWH.COD_GL_GROUP=AL7.COD_GL_GROUP
WHERE DWH.SEG_ALLOC = 'Y'
GROUP BY DWH.COD_ACCO_CENT, DWH.COD_BLCE_STATUS, DWH.COD_CURRENCY, DWH.COD_ENTITY,  
    DWH.COD_GL_GROUP, DWH.DES_GL_GROUP, DWH.ACCOUNT_CONCEPT, DWH.COD_PL_ACC, DWH.DES_PL_ACC, 
    DWH.COD_BLCE_PROD_ORIGIN, DWH.DES_BLCE_PROD_ORIGIN, DWH.COD_BUSINESS_LINE, DWH.DES_BUSINESS_LINE, 
    DWH.COD_SEGMENT_ORIGIN, DWH.DES_SEGMENT_ORIGIN, DWH.EXP_TYPE, DWH.EXP_FAMILY, DWH.COD_EXPENSE, DWH.COD_DRIVER, DWH.DATA_DATE, 
    AL1.EXP_TYPE, AL2.EXP_TYPE, AL3.EXP_TYPE, AL4.EXP_TYPE, AL5.EXP_TYPE, AL6.EXP_TYPE, AL7.EXP_TYPE, AL1.EXP_FAMILY, AL2.EXP_FAMILY, 
    AL3.EXP_FAMILY, AL4.EXP_FAMILY, AL5.EXP_FAMILY, AL6.EXP_FAMILY, AL7.EXP_FAMILY;


----Eliminación de tablas temporales
-- TRUNCATE TABLE IF EXISTS MIS_TMP_PAR_AC_DRI;
-- DROP TABLE IF EXISTS MIS_TMP_PAR_AC_DRI;
-- TRUNCATE TABLE IF EXISTS MIS_TMP_PAR_SEG_DRI;
-- DROP TABLE IF EXISTS MIS_TMP_PAR_SEG_DRI;
-- TRUNCATE TABLE IF EXISTS MIS_TMP_PAR_ALLOC_AC;
-- DROP TABLE IF EXISTS MIS_TMP_PAR_ALLOC_AC;
-- TRUNCATE TABLE IF EXISTS MIS_TMP_PAR_ALLOC_SEG;
-- DROP TABLE IF EXISTS MIS_TMP_PAR_ALLOC_SEG;
-- TRUNCATE TABLE IF EXISTS MIS_TMP_ALLOC_STG_INI;
-- DROP TABLE IF EXISTS MIS_TMP_ALLOC_STG_INI;
-- TRUNCATE TABLE IF EXISTS MIS_TMP_ALLOC_1;
-- DROP TABLE IF EXISTS MIS_TMP_ALLOC_1;
-- TRUNCATE TABLE IF EXISTS MIS_TMP_ALLOC_2;
-- DROP TABLE IF EXISTS MIS_TMP_ALLOC_2;


----------------- Validación de las tablas paramétricas del motor -----------------

----Tabla temporal de validaciones a realizar
DROP TABLE IF EXISTS MIS_TMP_ALLOC_DES_VALIDATION;
CREATE TABLE MIS_TMP_ALLOC_DES_VALIDATION (
COD_VALIDATION STRING, DES_VALIDATION STRING); 

----Tabla temporal para almacenar resultados
DROP TABLE IF EXISTS MIS_TMP_ALLOC_VALIDATION;
CREATE TABLE MIS_TMP_ALLOC_VALIDATION (
COD_DRIVER STRING, DIMENSION STRING, COD_VALIDATION STRING, VALIDATION_FIELD STRING);

----Descripción de validaciones a realizar
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('001', 'El porcentaje total repartido no es igual a 1 (100%)');
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('002', 'Hay porcentajes de repartición fuera del rango definido (0 a 1)');
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('003', 'Hay Centros de Costo sin parametrizar en la tabla MIS_PAR_REL_EXP_TYP');
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('004', 'Hay Segmentos sin parametrizar en las tabla MIS_PAR_REL_SEGMENT');
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('005', 'Hay Productos de Balance sin parametrizar en las tablas MIS_PAR_REL_BP_ACC O MIS_PAR_REL_BP_OPER');
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('006', 'El driver no fue parametrizado en la tabla de drivers MIS_PAR_ALLOC_AC_DRI');
INSERT INTO MIS_TMP_ALLOC_DES_VALIDATION VALUES ('007', 'El driver no fue parametrizado en la tabla de drivers MIS_PAR_ALLOC_SEG_DRI');

----Validación de porcentaje total a repartir por Centro de Costo
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'CENTRO DE COSTO' AS DIMENSION, '001' AS COD_VALIDATION, 'N/A' AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_AC_DRI a
GROUP BY a.COD_DRIVER
HAVING SUM(a.ALLOCATION_PERC) <> 1;

----Validación de porcentajes a repartir por Centro de Costo para descartar porcentaje negativos o mayores a 1
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'CENTRO DE COSTO' AS DIMENSION, '002' AS COD_VALIDATION, 'N/A' AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_AC_DRI a
GROUP BY a.COD_DRIVER
HAVING SUM(IF(a.ALLOCATION_PERC BETWEEN 0 AND 1, 0, 1)) <> 0;

----Verificación de Centro de Costo del Motor de Repartos de Gastos 
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'CENTRO DE COSTO' AS DIMENSION, '003' AS COD_VALIDATION, a.COD_ACCO_CENT AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_AC_DRI a 
LEFT JOIN (
    SELECT DISTINCT COD_ACCO_CENT
    FROM MIS_PAR_REL_EXP_TYP) b
ON a.COD_ACCO_CENT = b.COD_ACCO_CENT
WHERE TRIM(a.COD_ACCO_CENT) <> '' AND b.COD_ACCO_CENT IS NULL 
GROUP BY a.COD_DRIVER, a.COD_ACCO_CENT;

----Validacion de driver parametrizado para Centro de Costo
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'CENTRO DE COSTO' AS DIMENSION, '006' AS COD_VALIDATION, 'N/A' AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_AC_ENG a 
LEFT JOIN MIS_PAR_ALLOC_AC_DRI b
ON a.COD_DRIVER = b.COD_DRIVER 
WHERE b.COD_DRIVER IS NULL
GROUP BY a.COD_DRIVER;

----Validación de porcentaje total a repartir por Segmento-Producto
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'SEGMENTO - PRODUCTO' AS DIMENSION, '001' AS COD_VALIDATION, 'N/A' AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_SEG_DRI a
GROUP BY a.COD_DRIVER
HAVING SUM(a.ALLOCATION_PERC)  <> 1;

----Validación de porcentajes a repartir por Segmento-Producto para descartar porcentaje negativos o mayores a 1
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'SEGMENTO - PRODUCTO' AS DIMENSION, '002' AS COD_VALIDATION, 'N/A' AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_SEG_DRI a
GROUP BY a.COD_DRIVER
HAVING SUM(IF(a.ALLOCATION_PERC BETWEEN 0 AND 1, 0, 1)) <> 0;

----Verificación del segmento del Motor de Repartos de Gastos 
/*INSERT INTO MIS_TMP_ALLOC_VALIDATION --TODO: EXCLUSION DE CODIGO O DEFINICION DE PAR_REL_SEGMENT
SELECT a.COD_DRIVER, 'SEGMENTO - PRODUCTO' AS DIMENSION, '004' AS COD_VALIDATION, a.COD_SEGMENT AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_SEG_DRI a
LEFT JOIN (
    SELECT DISTINCT A.COD_SEGMENT 
    FROM MIS_PAR_REL_SEGMENT A) b
ON a.COD_SEGMENT = b.COD_SEGMENT 
WHERE TRIM(a.COD_SEGMENT) <> '' AND b.COD_SEGMENT IS NULL
GROUP BY a.COD_DRIVER, a.COD_SEGMENT;*/

----Verificación de Producto Balance del Motor de Repartos de Gastos 
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'SEGMENTO - PRODUCTO' AS DIMENSION, '005' AS COD_VALIDATION, a.COD_BLCE_PROD AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_SEG_DRI a 
LEFT JOIN (
    SELECT DISTINCT COD_BLCE_PROD
    FROM MIS_PAR_REL_BP_ACC
    UNION
    SELECT DISTINCT COD_BLCE_PROD
    FROM MIS_PAR_REL_BP_OPER) b
ON a.COD_BLCE_PROD = b.COD_BLCE_PROD
WHERE TRIM(a.COD_BLCE_PROD) <> '' AND b.COD_BLCE_PROD IS NULL
GROUP BY a.COD_DRIVER, a.COD_BLCE_PROD;

----Validacion de driver parametrizado para Segmento-Producto
INSERT INTO MIS_TMP_ALLOC_VALIDATION
SELECT a.COD_DRIVER, 'SEGMENTO - PRODUCTO' AS DIMENSION, '007' AS COD_VALIDATION, 'N/A' AS VALIDATION_FIELD
FROM MIS_PAR_ALLOC_SEG_ENG a 
LEFT JOIN MIS_PAR_ALLOC_SEG_DRI b
ON a.COD_DRIVER = b.COD_DRIVER 
WHERE b.COD_DRIVER IS NULL
GROUP BY a.COD_DRIVER;


----Llenado de tabla final de validaciones del motor
TRUNCATE TABLE IF EXISTS MIS_VAL_ALLOCATIONS_M;
INSERT INTO MIS_VAL_ALLOCATIONS_M
SELECT DISTINCT '${var:periodo}' AS DATA_DATE, a.DIMENSION, a.COD_DRIVER, b.DES_VALIDATION, a.VALIDATION_FIELD
FROM MIS_TMP_ALLOC_VALIDATION a
LEFT JOIN MIS_TMP_ALLOC_DES_VALIDATION b
ON a.COD_VALIDATION = b.COD_VALIDATION;

----Eliminación de tablas temporales
TRUNCATE TABLE IF EXISTS MIS_TMP_ALLOC_DES_VALIDATION;
DROP TABLE IF EXISTS MIS_TMP_ALLOC_DES_VALIDATION;
TRUNCATE TABLE IF EXISTS MIS_TMP_ALLOC_VALIDATION;
DROP TABLE IF EXISTS MIS_TMP_ALLOC_VALIDATION;